/*
Navicat MySQL Data Transfer

Source Server         : mysql01
Source Server Version : 50562
Source Host           : 127.0.0.1:3306
Source Database       : blogs

Target Server Type    : MYSQL
Target Server Version : 50562
File Encoding         : 65001

Date: 2020-04-11 14:56:28
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `blogs`
-- ----------------------------
DROP TABLE IF EXISTS `blogs`;
CREATE TABLE `blogs` (
  `blog_id` varchar(20) NOT NULL COMMENT '博客ID',
  `user_id` varchar(20) NOT NULL COMMENT '发布人ID',
  `blog_title` varchar(255) NOT NULL COMMENT '博客标题',
  `blog_content` longtext NOT NULL COMMENT '博客内容',
  `blog_views` bigint(20) DEFAULT '0' COMMENT '浏览量',
  `blog_comment_count` bigint(20) DEFAULT '0' COMMENT '评论数',
  `blog_like_count` bigint(20) DEFAULT NULL COMMENT '点赞数',
  `blog_created_time` datetime DEFAULT NULL COMMENT '博客创建时间',
  `blog_updated_time` datetime DEFAULT NULL COMMENT '博文修改时间',
  PRIMARY KEY (`blog_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blogs
-- ----------------------------
INSERT INTO `blogs` VALUES ('10A3EB5F', 'BD4E76C0', '555', '### vvvvvvv\ndjiejdljdfl\n## #  deidjkl\nJDIej \n$S_2=S$', '0', '0', null, '2019-10-28 18:04:12', '2019-10-28 18:04:12');
INSERT INTO `blogs` VALUES ('7588638B', 'F7BBA498', '测试目录', '<h1 id=\"h1-heading-1\"><a name=\"Heading 1\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 1</h1><h2 id=\"h2-heading-2\"><a name=\"Heading 2\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 2</h2><h3 id=\"h3-heading-3\"><a name=\"Heading 3\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 3</h3><h4 id=\"h4-heading-4\"><a name=\"Heading 4\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 4</h4><h5 id=\"h5-heading-5\"><a name=\"Heading 5\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 5</h5><h6 id=\"h6-heading-6\"><a name=\"Heading 6\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 6</h6><h1 id=\"h1-heading-1-link-heading-link\"><a name=\"Heading 1 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"h2-heading-2-link-heading-link\"><a name=\"Heading 2 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"h3-heading-3-link-heading-link\"><a name=\"Heading 3 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"h4-heading-4-link-heading-link-heading-link-heading-link\"><a name=\"Heading 4 link   Heading link  Heading link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"h5-heading-5-link-heading-link\"><a name=\"Heading 5 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"h6-heading-6-link-heading-link\"><a name=\"Heading 6 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6>', '0', '0', null, '2019-10-15 11:46:31', '2019-10-15 11:46:31');
INSERT INTO `blogs` VALUES ('7BFCE25D', 'BD4E76C0', '简介', '<p>简介<br>本文从一名新手的角度（默认对Vue有了解，对Koa或者Express有了解）出发，从0开始构建一个数据通过Koa提供API的形式获取，页面通过Vue渲染的完整的前端项目。可以了解到Vue构建单页面的一些知识以及前端路由的使用、Koa如何提供API接口，如何进行访问过滤（路由）、验证（JSON-WEB-TOKEN）以及Sequelize操作MySQL数据库的一些知识和技巧，希望能够作为一篇入门全栈开发的文章吧。</p>\n<p>更新：文末给出的github仓库已经更新Koa2版本。请使用Node.js v7.6.0及以上版本体验~</p>\n<p>写在前面<br>我曾经写过一篇文章，是用express和mongodb入门Nodejs的前后端开发，这篇文章里简单的做了一个小demo，能够让你读写mongodb数据库，并且从数据库里将数据读取出来显示到页面上。算是一个简单的读写小demo吧，也算是服务端渲染的一次初尝试。并且我还写过用nodejs写简单小爬虫的文章，用爬虫来获取数据写入数据库。通过以上的的方法我用express写了一个小网站，记录并显示北邮人论坛每天的十大的内容。挺好玩的对吧，可以把想要做的事用代码来实现。</p>\n<p>后来我接触到了Koa，并开始了学习，从express迁移到Koa其实曲线还算是比较平滑的。不过用Koa的方式也还是采用服务端渲染页面的方式。而且我发现目前网络上少有写过用Koa构建的前后端分离的应用、网站文章，我最近做的一个项目里需要用到的方式就是用Vue构建页面，数据的获取全部走后端API的形式，也就是所谓的前后端分离吧。正好在这过程中走了不少的坑，包括数据库的使用上也算是个新手，所以写篇文章记录一下，用同样的思路和方法构建一个简单的Todolist，欢迎讨论，轻拍~</p>\n<p>项目结构<br>.<br>├── LICENSE<br>├── README.md<br>├── .env  // 环境变量配置文件<br>├── app.js  // Koa入口文件<br>├── build // vue-cli 生成，用于webpack监听、构建<br>│   ├── build.js<br>│   ├── check-versions.js<br>│   ├── dev-client.js<br>│   ├── dev-server.js<br>│   ├── utils.js<br>│   ├── webpack.base.conf.js<br>│   ├── webpack.dev.conf.js<br>│   └── webpack.prod.conf.js<br>├── config // vue-cli 生成&amp;自己加的一些配置文件<br>│   ├── default.conf<br>│   ├── dev.env.js<br>│   ├── index.js<br>│   └── prod.env.js<br>├── dist // Vue build 后的文件夹<br>│   ├── index.html // 入口文件<br>│   └── static // 静态资源<br>├── index.html // vue-cli生成，用于容纳Vue组件的主html文件。单页应用就只有一个html<br>├── package.json // npm的依赖、项目信息文件<br>├── server // Koa后端，用于提供Api<br>│   ├── config // 配置文件夹<br>│   ├── controllers // controller-控制器<br>│   ├── models // model-模型<br>│   ├── routes // route-路由<br>│   └── schema // schema-数据库表结构<br>├── src // vue-cli 生成&amp;自己添加的utils工具类<br>│   ├── App.vue // 主文件<br>│   ├── assets // 相关静态资源存放<br>│   ├── components // 单文件组件<br>│   ├── main.js // 引入Vue等资源、挂载Vue的入口js<br>│   └── utils // 工具文件夹-封装的可复用的方法、功能<br>└── yarn.lock // 用yarn自动生成的lock文件<br>看起来好像很复杂的样子，其实很大一部分文件夹的结构是vue-cli这个工具帮我们生成的。而我们需要额外添加的主要是Koa的入口文件以及一个server文件夹用于Koa提供API。这样的话，在获取数据的方面就可以走Koa所提供的API，而Vue只需关心怎么把这些数据渲染到页面上就好了。</p>\n<p>项目用到的一些关键依赖<br>以下依赖的版本都是本文所写的时候的版本，或者更旧一些</p>\n<p>Vue.js(v2.1.8)<br>Vue-Router(v2.1.1)<br>Axios(v0.15.3)<br>Element(v1.1.2)<br>Koa.js(v1.2.4) // 没采用Koa2<br>Koa-<a href=\"mailto:Router@5.4\">Router@5.4</a>Koa-jwtKoa-static等一系列Koa中间件<br>Mysql(v2.12.0) // nodejs的mysql驱动，并不是mysql本身版本（项目采用mysql5.6）<br>Sequelize(v3.28.0) // 操作数据库的ORM<br>Yarn(v0.18.1) // 比起npm更快一些<br>剩下依赖可以参考本文最后给出的项目demo仓库。</p>\n<p>项目启动<br>Nodejs与npm的安装不再叙述（希望大家装上的node版本大于等于6.x，不然还需要加上–harmony标志才可以开启es6），默认读者已经掌握npm安装依赖的方法。首先全局安装npm i vue-cli -g，当然本项目基本上是采用yarn，所以也可以yarn global add vue-cli。</p>\n<p>Tips: 可以给yarn换上淘宝源，速度更快: yarn config set registry “<a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a>“</p>\n<p>然后我们初始化一个Vue2的webpack的模板：</p>\n<p>vue init webpack demo</p>\n<p>Tips: 上面的demo可以填写你自己的项目名称</p>\n<p>然后进行一些基本配置选择之后，你就可以得到一个基本的vue-cli生成的项目结构。</p>\n<p>接着我们进入vue-cli生成的目录，安装Vue的项目依赖并安装Koa的项目依赖：yarn &amp;&amp; yarn add koa koa-<a href=\"mailto:router@5.4\">router@5.4</a> koa-logger koa-json koa-bodyparser，（注意是安装koa-router的5.4版，因为7.X版本是支持Koa2的）然后进行一些基本目录建立：</p>\n<p>在vue-cli生成的demo目录下，建立server文件夹以及子文件夹：</p>\n<p>├── server // Koa后端，用于提供Api<br>    ├── config // 配置文件夹<br>    ├── controllers // controller-控制器<br>    ├── models // model-模型<br>    ├── routes // route-路由<br>    └── schema // schema-数据库表结构<br>然后在demo文件夹下我们创建一个app.js的文件，作为Koa的启动文件。</p>\n<p>写入如下基本的内容就可以启动Koa啦：</p>\n<p>const app = require(‘koa’)()<br>  , koa = require(‘koa-router’)()<br>  , json = require(‘koa-json’)<br>  , logger = require(‘koa-logger’); // 引入各种依赖</p>\n<p>app.use(require(‘koa-bodyparser’)());<br>app.use(json());<br>app.use(logger());</p>\n<p>app.use(function* (next){<br>  let start = new Date;<br>  yield next;<br>  let ms = new Date - start;<br>  console.log(‘%s %s - %s’, this.method, this.url, ms); // 显示执行的时间<br>});</p>\n<p>app.on(‘error’, function(err, ctx){<br>  console.log(‘server error’, err);<br>});</p>\n<p>app.listen(8889,() =&gt; {<br>  console.log(‘Koa is listening in 8889’);<br>});</p>\n<p>module.exports = app;<br>然后在控制台输入node app.js，能看到输出Koa is listening in 8889，则说明我们的Koa已经启动成功了，并在8889端口监听。</p>\n<p>前端页面构建<br>这个DEMO是做一个Todo-List，我们首先来做一个登录页面。</p>\n<p>Tips: 为了方便构建页面和美观，本文采用的Vue2的前端UI框架是element-ui。安装：yarn add element-ui</p>\n<p>模板引擎我习惯用pug，CSS预处理我习惯用stylus，当然每个人自己的习惯和喜好是不一样的，所以大家根据自己平时的喜好来就行了。</p>\n<p>为了方便大家查看代码，就不用pug了，学习成本相对高一些。不过CSS用stylus写起来简便，看起来也不会难懂，是我自己的习惯，所以还需要安装一下yarn add stylus stylus-loader。</p>\n<p>Tips: 安装stylus-loader是为了让webpack能够渲染stylus</p>\n<p>然后要把element-ui引入项目中。打开src/main.js，将文件改写如下：</p>\n<p>import Vue from ‘vue’<br>import App from ‘./App’<br>import ElementUI from ‘element-ui’ // 引入element-ui<br>import ‘element-ui/lib/theme-default/index.css’</p>\n<p>Vue.use(ElementUI) // Vue全局使用</p>\n<p>new Vue({<br>  el: ‘#app’,<br>  template: ‘&lt;App/&gt;‘,<br>  components: { App }<br>})<br>然后我们在项目根目录下输入npm run dev，启动开发模式，这个模式有webpack的热加载，也就是你写完代码，浏览器立即就能响应变化。</p>\n<p>为了实现响应式页面，我们要在项目目录下的index.html的head标签内加入以下meta：</p>\n<p>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;\n\n</p>\n<p>登录界面<br>进入src/components目录，新建一个Login.vue的文件。然后我们来写第一个页面：</p>\n<p>&lt;template&gt;<br>  &lt;el-row class=&quot;content&quot;&gt;<br>    &lt;el-col :xs=&quot;24&quot; :sm=&quot;{span: 6,offset: 9}&quot;&gt;<br>      &lt;span class=&quot;title&quot;&gt;<br>       欢迎登录<br>      &lt;/span&gt;<br>      &lt;el-row&gt;<br>        &lt;el-input \n          v-model=&quot;account&quot; \n          placeholder=&quot;账号&quot;\n          type=&quot;text&quot;&gt;<br>        &lt;/el-input&gt;<br>        &lt;el-input \n          v-model=&quot;password&quot; \n          placeholder=&quot;密码&quot;\n          type=&quot;password&quot;&gt;<br>        &lt;/el-input&gt;<br>        &lt;el-button type=&quot;primary&quot;&gt;登录&lt;/el-button&gt;<br>      &lt;/el-row&gt;<br>    &lt;/el-col&gt;<br>  &lt;/el-row&gt;<br>&lt;/template&gt;\n\n</p>\n<p>&lt;script&gt;<br>export default {<br>  data () {<br>    return {<br>      account: ‘’,<br>      password: ‘’<br>    };<br>  }<br>};<br>&lt;/script&gt;\n\n</p>\n<p>&lt;style lang=&quot;stylus&quot; scoped&gt;<br>  .el-row.content<br>    padding 16px<br>  .title<br>    font-size 28px<br>  .el-input<br>    margin 12px 0<br>  .el-button<br>    width 100%<br>    margin-top 12px<br>&lt;/style&gt;<br>在这里就有一些值得注意的地方。首先是template标签内的直接子元素最多只能挂载一个。也就是你不能这么写：</p>\n<p>&lt;template&gt;<br>  &lt;el-row&gt;&lt;/el-row&gt;<br>  &lt;el-row&gt;&lt;/el-row&gt;<br>&lt;/template&gt;<br>否则会报错：template syntax error Component template should contain exactly one root element，template下只能有一个根元素。不过为了写多个元素，你可以这样：<br><br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-row&gt;&lt;/el-row&gt;<br>    &lt;el-row&gt;&lt;/el-row&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>同时注意到，在Login.vue的style标签内有个scoped属性，这个属性能够使这些样式只在这个组件内生效（因为Webpack在渲染的时候会将这个组件内的元素自动打上一串形如data-v-62a7f97e这样的属性，对于这些样式也会变成形如.title[data-v-62a7f97e]{ font-size: 28px;}的样子，保证了不会和其他组件的样式冲突。<br><br>页面写完之后，如果不把组件注册到Vue之下那么页面是不会显示的。因此这个时候需要把APP.vue这个文件改写一下：<br><br>&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;img src=&quot;./assets/logo.png&quot;&gt;<br>    &lt;Login&gt;&lt;/Login&gt; &lt;!--使用Login组件--&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;\n\n</p>\n<p>&lt;script&gt;<br>import Login from ‘./components/Login’ // 引入Login组件<br><br>export default {<br>  name: ‘app’,<br>  components: {<br>    Login // 注册组件<br>  }<br>}<br>&lt;/script&gt;\n\n</p>\n<p>&lt;style&gt;</p>\n<h1 id=\"h1-app-\"><a name=\"app {\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>app {</h1><p>  font-family: ‘Avenir’, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>}<br>&lt;/style&gt;<br>也就是把Login这个组件注册到Vue下，同时你再看浏览器，已经不再是vue-cli默认生成的Hello欢迎界面了。</p>\n<p>Login<br>Login</p>\n<p>接着我们写一下登录成功后的界面。</p>\n<p>TodoList页面<br>还是在src/components目录下，写一个叫做TodoList.vue的文件。</p>\n<p>接着我们开始写一个TodoList：</p>\n<p>&lt;template&gt;<br>  &lt;el-row class=&quot;content&quot;&gt;<br>    &lt;el-col :xs=&quot;{span:20,offset:2}&quot; :sm=&quot;{span:8,offset:8}&quot;&gt;<br>      &lt;span&gt;<br>        欢迎：{{name}}！你的待办事项是：<br>      &lt;/span&gt;<br>      &lt;el-input placeholder=&quot;请输入待办事项&quot; v-model=&quot;todos&quot; <a href=\"https://github.com/keyup\" title=\"&#64;keyup\" class=\"at-link\">@keyup</a>.enter.native=&quot;addTodos&quot;&gt;&lt;/el-input&gt;<br>      &lt;el-tabs v-model=&quot;activeName&quot;&gt;<br>        &lt;el-tab-pane label=&quot;待办事项&quot; name=&quot;first&quot;&gt;<br>          &lt;el-col :xs=&quot;24&quot;&gt;<br>            &lt;template v-if=&quot;!Done&quot;&gt; &lt;!--v-if和v-for不能同时在一个元素内使用，因为Vue总会先执行v-for--&gt;<br>              &lt;template v-for=&quot;(item, index) in list&quot;&gt;<br>                &lt;div class=&quot;todo-list&quot; v-if=&quot;item.status == false&quot;&gt;<br>                  &lt;span class=&quot;item&quot;&gt;<br>                    {{ index + 1 }}. {{ item.content }}<br>                  &lt;/span&gt;<br>                  &lt;span class=&quot;pull-right&quot;&gt;<br>                    &lt;el-button size=&quot;small&quot; type=&quot;primary&quot; <a href=\"https://github.com/click\" title=\"&#64;click\" class=\"at-link\">@click</a>=&quot;finished(index)&quot;&gt;完成&lt;/el-button&gt;<br>                    &lt;el-button size=&quot;small&quot; :plain=&quot;true&quot; type=&quot;danger&quot; <a href=\"https://github.com/click\" title=\"&#64;click\" class=\"at-link\">@click</a>=&quot;remove(index)&quot;&gt;删除&lt;/el-button&gt;<br>                  &lt;/span&gt;<br>                &lt;/div&gt;<br>              &lt;/template&gt;<br>            &lt;/template&gt;<br>            &lt;div v-else-if=&quot;Done&quot;&gt;<br>              暂无待办事项<br>            &lt;/div&gt;<br>          &lt;/el-col&gt;<br>        &lt;/el-tab-pane&gt;<br>        &lt;el-tab-pane label=&quot;已完成事项&quot; name=&quot;second&quot;&gt;<br>          &lt;template v-if=&quot;count &gt; 0&quot;&gt;<br>            &lt;template v-for=&quot;(item, index) in list&quot;&gt;<br>              &lt;div class=&quot;todo-list&quot; v-if=&quot;item.status == true&quot;&gt;<br>                &lt;span class=&quot;item finished&quot;&gt;<br>                  {{ index + 1 }}. {{ item.content }}<br>                &lt;/span&gt;<br>                &lt;span class=&quot;pull-right&quot;&gt;<br>                  &lt;el-button size=&quot;small&quot; type=&quot;primary&quot; <a href=\"https://github.com/click\" title=\"&#64;click\" class=\"at-link\">@click</a>=&quot;restore(index)&quot;&gt;还原&lt;/el-button&gt;<br>                &lt;/span&gt;<br>              &lt;/div&gt;<br>            &lt;/template&gt;<br>          &lt;/template&gt;<br>          &lt;div v-else&gt;<br>            暂无已完成事项<br>          &lt;/div&gt;<br>        &lt;/el-tab-pane&gt;<br>      &lt;/el-tabs&gt;<br>    &lt;/el-col&gt;<br>  &lt;/el-row&gt;<br>&lt;/template&gt;\n\n</p>\n<p>&lt;script&gt;<br>export default {<br>  data () {<br>    return {<br>      name: ‘Molunerfinn’,<br>      todos: ‘’,<br>      activeName: ‘first’,<br>      list:[],<br>      count: 0<br>    };<br>  },<br>  computed: { // 计算属性用于计算是否已经完成了所有任务<br>    Done(){<br>      let count = 0;<br>      let length = this.list.length;<br>      for(let i in this.list){<br>        this.list[i].status == true ? count += 1 : ‘’;<br>      }<br>      this.count = count;<br>      if(count == length || length == 0){<br>        return true<br>      }else{<br>        return false<br>      }<br>    }<br>  },<br><br>  methods: {<br>    addTodos() {<br>      if(this.todos == ‘’)<br>        return<br>      let obj = {<br>        status: false,<br>        content: this.todos<br>      }<br>      this.list.push(obj);<br>      this.todos = ‘’;<br>    },<br>    finished(index) {<br>      this.$set(this.list[index],’status’,true) // 通过set的方法让数组的变动能够让Vue检测到<br>      this.$message({<br>        type: ‘success’,<br>        message: ‘任务完成’<br>      })<br>    },<br>    remove(index) {<br>      this.list.splice(index,1);<br>      this.$message({<br>        type: ‘info’,<br>        message: ‘任务删除’<br>      })<br>    },<br>    restore(index) {<br>      this.$set(this.list[index],’status’,false)<br>      this.$message({<br>        type: ‘info’,<br>        message: ‘任务还原’<br>      })<br>    }<br>  }<br>};<br>&lt;/script&gt;\n\n</p>\n<p>&lt;style lang=&quot;stylus&quot; scoped&gt;<br>  .el-input<br>    margin 20px auto<br>  .todo-list<br>    width 100%<br>    margin-top 8px<br>    padding-bottom 8px<br>    border-bottom 1px solid #eee<br>    overflow hidden<br>    text-align left<br>    .item<br>      font-size 20px<br>      &amp;.finished<br>        text-decoration line-through<br>        color #ddd<br>  .pull-right<br>    float right<br>&lt;/style&gt;<br>页面构建其实没有什么特别好说的，但是因为我自己有踩点坑，所以还是专门讲一下：</p>\n<p>v-if和v-for放在一个元素内同时使用，因为Vue总会先执行v-for，所以导致v-if不会被执行。替代地，你可以使用一个额外的template元素用来放置v-if或者v-for从而达到同样的目的。这是相关的issue。</p>\n<p>计算属性对于直接的数据比如a: 2 -&gt; a: 3这样的数据变动可以直接检测到。但是如果是本例中的list的某一项的status这个属性变化了，如果我们直接使用list[index].status = true这样的写法的话，Vue将无法检测到数据变动。替代地，可以使用set方法（全局是Vue.set()，实例中是this.$set()），通过set方法可以让数据的变动变得可以被检测到。从而让计算属性能够捕捉到变化。可以参考官方文档对于响应式原理的描述。</p>\n<p>Todolist<br>Todolist</p>\n<p>写完TodoList之后，我们需要将它和vue-router配合起来，从而使这个单页应用能够进行页面跳转。</p>\n<p>页面路由<br>由于不采用服务端渲染，所以页面路由走的是前端路由。安装一下vue-router：yarn add vue-router。</p>\n<p>安装好后，我们挂载一下路由。打开main.js文件改写如下：</p>\n<p>// src/main.js</p>\n<p>import Vue from ‘vue’<br>import App from ‘./App’<br>import ElementUI from ‘element-ui’<br>import ‘element-ui/lib/theme-default/index.css’<br>import VueRouter from ‘vue-router’</p>\n<p>Vue.use(ElementUI);<br>Vue.use(VueRouter);</p>\n<p>import Login from <code>./components/Login</code><br>import TodoList from <code>./components/TodoList</code></p>\n<p>const router =  new VueRouter({<br>  mode: ‘history’, // 开启HTML5的history模式，可以让地址栏的url长得跟正常页面跳转的url一样。（不过还需要后端配合，讲Koa的时候会说）<br>  base: __dirname,<br>  routes: [<br>    {<br>      path: ‘/‘,  // 默认首页打开是登录页<br>      component: Login<br>    },<br>    {<br>      path: ‘/todolist’,<br>      component: TodoList<br>    },<br>    {<br>      path: ‘*’,<br>      redirect: ‘/‘ // 输入其他不存在的地址自动跳回首页<br>    }<br>  ]<br>})</p>\n<p>const app = new Vue({<br>  router: router, // 启用router<br>  render: h =&gt; h(App)<br>}).$mount(‘#app’) //挂载到id为app的元素上<br>这样就把路由挂载好了，但是你打开页面发现好像还是没有什么变化。这是因为我们没有把路由视图放到页面上。现在我们改写一下APP.vue：</p>\n<p>&lt;!-- APP.vue --&gt;\n</p>\n<p>&lt;template&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;img src=&quot;./assets/logo.png&quot;&gt;<br>    &lt;router-view&gt;&lt;/router-view&gt; &lt;!-- 原本的Login换成了router-view 这就是路由视图渲染的目标元素--&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;\n\n</p>\n<p>&lt;script&gt;<br>export default {<br>  name: ‘app’ // 不需要再引入<code>Login</code>`TodoList`组件了，因为在路由里已经注册了<br>}<br>&lt;/script&gt;\n\n</p>\n<p>&lt;style&gt;</p>\n<h1 id=\"h1-app-\"><a name=\"app {\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>app {</h1><p>  font-family: ‘Avenir’, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>}<br>&lt;/style&gt;<br>然后再看一下你的页面，这个时候你如果在地址栏后加上/todolist那么就会跳转到TodoList页面啦。</p>\n<p>不过我们如何通过点击登录按钮跳转到TodoList呢？改写一下Login.vue，就可以跳转了。</p>\n<p>只需要给登录的button加一个方法即可：</p>\n<p>&lt;!-- Login.vue --&gt;\n</p>\n<p>······</p>\n<p>&lt;!-- 给input增加键盘事件，当输入完密码回车也执行loginToDo方法 --&gt;\n</p>\n<p>&lt;el-input \n  v-model=&quot;password&quot; \n  placeholder=&quot;密码&quot;\n  type=&quot;password&quot;\n  <a href=\"https://github.com/keyup\" title=\"&#64;keyup\" class=\"at-link\">@keyup</a>.enter.native=&quot;loginToDo&quot;&gt;<br>&lt;/el-input&gt;<br>&lt;!-- 增加一个click方法 loginToDo --&gt;</p>\n<p>&lt;el-button type=&quot;primary&quot; <a href=\"https://github.com/click\" title=\"&#64;click\" class=\"at-link\">@click</a>=&quot;loginToDo&quot;&gt;登录&lt;/el-button&gt;</p>\n<p>······</p>\n<p>&lt;script&gt;<br>export default {<br>  data () {<br>    return {<br>      account: ‘’,<br>      password: ‘’<br>    };<br>  },<br>  methods: {<br>    loginToDo() {<br>      this.$router.push(‘/todolist’) // 编程式路由，通过push方法，改变路由。<br>    }<br>  }<br>};<br>&lt;/script&gt;<br>然后你就可以通过点击登录按钮进行页面跳转了。并且你可以发现，页面地址从localhost:8080变成了localhost:8080/todolist，长得跟正常的url跳转一样。（但是实际上我们是单页应用，只是在应用内进行页面跳转而已，没有向后端额外请求）</p>\n<p>login2todolist<br>login2todolist</p>\n<p>至此，我们已经完成了一个纯前端的单页应用，能够进行页面跳转，能够做简单的ToDoList的添加和删除和还原。当然这个东西只能算是个能看不能用的东西——因为登录系统有名无实、ToDoList只要页面刷新一下就没了。</p>\n<p>于是我们可以先把前端放一放。开启我们的后端之旅。</p>\n<p>后端环境搭建<br>MySQL<br>之所以没有用Node界大家普遍喜爱的Mongodb主要是因为之前我用过它，而没有用过MySQL，本着学习的态度，我决定用用MySQL。还有就是Express + Mongodb的教程其实很早之前就已经满大街都是了。所以如果你觉得Mongodb更合你的胃口，看完本文你完全可以用Mongodb构建一个类似的应用。</p>\n<p>去MySQL的官网下载安装对应平台MySQL的Community Server。</p>\n<p>通常来说安装的步骤都是比较简单的。对于MySQL的基本安装、开启步骤可以参考这篇文章，这篇是windows的。当然其他平台的安装也是很方便的，都有相应的包管理工具可以获取。值得注意的就是，安装完MySQL之后你需要设定一下root账户的密码。保证安全性。如果你漏了设定，或者你不知道怎么设定，可以参考这篇文章</p>\n<p>因为我对MySQL的SQL语句不是很熟悉，所以我需要一个可视化的工具来操作MySQL。Windows上我用的是HediSQL，macOS上我用的是Sequel Pro。它们都是免费的。</p>\n<p>然后我们可以用这些可视化工具连上MySQL的server（默认端口是3306）之后，创建一个新的数据库，叫做todolist。（当然你也可以用SQL语句:CREATE DATABASE todolist，之后不再赘述）。</p>\n<p>接着我们可以来开始创建数据表了。</p>\n<p>我们需要创建两张表，一张是用户表，一张是待办事项表。用户表用于登录、验证，待办事项表用于展示我们的待办事项。</p>\n<p>创建一张user表，其中password我们稍后会进行bcrypt加密（取128位）。</p>\n<p>字段    类型    说明<br>id    int（自增）    用户的id<br>user_name    CHAR(50)    用户的名字<br>password    CHAR(128)    用户的密码<br>创建一张list表，所需的字段是id、user_id、content、status即可。</p>\n<p>字段    类型    说明<br>id    int（自增）    list的id<br>user_id    int(11)    用户的id<br>content    CHAR(255)    list的内容<br>status    tinyint(1)    list的状态<br>直接跟数据库打交道的部分基本就是这样了。</p>\n<p>Sequelize<br>跟数据库打交道的时候我们都需要一个好的操作数据库的工具，能够让我们用比较简单的方法来对数据库进行增删改查。对于Mongodb来说大家熟悉的是Mongoose以及我用过一个相对更简单点的Monk。对于MySQL，我选用的是Sequelize，它支持多种关系型数据库（Sqlite、MySQL、Postgres等），它的操作基本都能返回一个Promise对象，这样在Koa里面我们能够很方便地进行”同步”操作。</p>\n<p>更多关于Sequelize的用法，可以参考官方文档，以及这两篇文章——Sequelize中文API文档、Sequelize和MySQL对照</p>\n<p>在用Sequelize连接数据库之前我们需要把数据库的表结构用sequelize-auto导出来。</p>\n<p>更多关于sequelize-auto的使用可以参考官方介绍或者这篇文章</p>\n<p>由此我们需要分别安装这几个依赖：yarn global add sequelize-auto &amp;&amp; yarn add sequelize mysql。</p>\n<p>注：上面用yarn安装的mysql是nodejs环境下的mysql驱动。</p>\n<p>进入server的目录，执行如下语句sequelize-auto -o “./schema” -d todolist -h 127.0.0.1 -u root -p 3306 -x XXXXX -e mysql，（其中 -o 参数后面的是输出的文件夹目录， -d 参数后面的是数据库名， -h 参数后面是数据库地址， -u 参数后面是数据库用户名， -p 参数后面是端口号， -x 参数后面是数据库密码，这个要根据自己的数据库密码来！ -e 参数后面指定数据库为mysql）</p>\n<p>然后就会在schema文件夹下自动生成两个文件：</p>\n<p>// user.js</p>\n<p>module.exports = function(sequelize, DataTypes) {<br>  return sequelize.define(‘user’, {<br>    id: {<br>      type: DataTypes.INTEGER(11), // 字段类型<br>      allowNull: false, // 是否允许为NULL<br>      primaryKey: true, // 主键<br>      autoIncrement: true // 是否自增<br>    },<br>    user_name: {<br>      type: DataTypes.CHAR(50), // 最大长度为50的字符串<br>      allowNull: false<br>    },<br>    password: {<br>      type: DataTypes.CHAR(32),<br>      allowNull: false<br>    }<br>  }, {<br>    tableName: ‘user’ // 表名<br>  });<br>};<br>// list.js</p>\n<p>module.exports = function(sequelize, DataTypes) {<br>  return sequelize.define(‘list’, {<br>    id: {<br>      type: DataTypes.INTEGER(11),<br>      allowNull: false,<br>      primaryKey: true,<br>      autoIncrement: true<br>    },<br>    user_id: {<br>      type: DataTypes.INTEGER(11),<br>      allowNull: false<br>    },<br>    content: {<br>      type: DataTypes.CHAR(255),<br>      allowNull: false<br>    },<br>    status: {<br>      type: DataTypes.INTEGER(1),<br>      allowNull: false<br>    }<br>  }, {<br>    tableName: ‘list’<br>  });<br>};<br>自动化工具省去了很多我们手动定义表结构的时间。同时注意到生成的数据库表结构文件都自动帮我们module.exports出来了，所以很方便我们之后的引入。</p>\n<p>在server目录下的config目录下我们新建一个db.js，用于初始化Sequelize和数据库的连接。</p>\n<p>// db.js</p>\n<p>const Sequelize = require(‘sequelize’); // 引入sequelize</p>\n<p>// 使用url连接的形式进行连接，注意将root: 后面的XXXX改成自己数据库的密码<br>const Todolist = new Sequelize(‘mysql://root:XXXX<a href=\"https://github.com/localhost\" title=\"&#64;localhost\" class=\"at-link\">@localhost</a>/todolist’,{<br>  define: {<br>    timestamps: false // 取消Sequelzie自动给数据表加入时间戳（createdAt以及updatedAt）<br>  }<br>}) </p>\n<p>module.exports = {<br>  Todolist // 将Todolist暴露出接口方便Model调用<br>}<br>接着我们去models文件夹里将数据库和表结构文件连接起来。在这个文件夹下新建一个user.js的文件。我们先来写一个查询用户id的东西。</p>\n<p>为此我们可以先在数据库里随意加一条数据：</p>\n<p>test<br>test</p>\n<p>通常我们要查询一个用户id为1的数据，会很自然的想到类似如下的写法：</p>\n<p>const userInfo = User.findOne({ where: { id: 1} }); // 查询<br>console.log(userInfo); // 输出结果<br>但是上面的写法实际上是行不通的。因为JS的特性让它的IO操作是异步的。而上面的写法，userInfo将是返回的一个Promise对象，而不是最终的userInfo。如果又想用同步的写法获取异步IO操作得到的数据的话，通常情况下是不能直接得到的。但是在Koa里，由于有co的存在，让这一切变得十分简单。改写如下：</p>\n<p>// models/user.js<br>const db = require(‘../config/db.js’),<br>      userModel = ‘../schema/user.js’; // 引入user的表结构<br>const TodolistDb = db.Todolist; // 引入数据库</p>\n<p>const User = TodolistDb.import(userModel); // 用sequelize的import方法引入表结构，实例化了User。</p>\n<p>const getUserById = function<em> (id){ // 注意是function</em> 而不是function 对于需要yield操作的函数都需要这种generator函数。<br>  const userInfo = yield User.findOne({ // 用yield控制异步操作，将返回的Promise对象里的数据返回出来。也就实现了“同步”的写法获取异步IO操作的数据<br>    where: {<br>      id: id<br>    }<br>  });</p>\n<p>  return userInfo // 返回数据<br>}</p>\n<p>module.exports = {<br>  getUserById  // 导出getUserById的方法，将会在controller里调用<br>}<br>接着我们在controllers写一个user的controller，来执行这个方法，并返回结果。</p>\n<p>// controllers/user.js </p>\n<p>const user = require(‘../models/user.js’);</p>\n<p>const getUserInfo = function* (){<br>  const id = this.params.id; // 获取url里传过来的参数里的id<br>  const result = yield user.getUserById(id);  // 通过yield “同步”地返回查询结果<br>  this.body = result // 将请求的结果放到response的body里返回<br>}</p>\n<p>module.exports = {<br>  getUserInfo // 把获取用户信息的方法暴露出去<br>}<br>写完这个还不能直接请求，因为我们还没有定义路由，请求经过Koa找不到这个路径是没有反应的。</p>\n<p>在routes文件夹下写一个auth.js的文件。（其实user表是用于登录的，所以走auth）</p>\n<p>// routes/auth.js</p>\n<p>const auth = require(‘../controllers/user.js’);<br>const router = require(‘koa-router’)();</p>\n<p>router.get(‘/user/:id’, auth.getUserInfo); // 定义url的参数是id,用user的auth方法引入router</p>\n<p>module.exports = router; // 把router规则暴露出去<br>至此我们已经接近完成我们的第一个API了，还缺最后一步，将这个路由规则“挂载”到Koa上去。</p>\n<p>回到根目录的app.js，改写如下：</p>\n<p>const app = require(‘koa’)()<br>  , koa = require(‘koa-router’)()<br>  , json = require(‘koa-json’)<br>  , logger = require(‘koa-logger’)<br>  , auth = require(‘./server/routes/auth.js’); // 引入auth</p>\n<p>app.use(require(‘koa-bodyparser’)());<br>app.use(json());<br>app.use(logger());</p>\n<p>app.use(function* (next){<br>  let start = new Date;<br>  yield next;<br>  let ms = new Date - start;<br>  console.log(‘%s %s - %s’, this.method, this.url, ms);<br>});</p>\n<p>app.on(‘error’, function(err, ctx){<br>  console.log(‘server error’, err);<br>});</p>\n<p>koa.use(‘/auth’, auth.routes()); // 挂载到koa-router上，同时会让所有的auth的请求路径前面加上’/auth’的请求路径。</p>\n<p>app.use(koa.routes()); // 将路由规则挂载到Koa上。</p>\n<p>app.listen(8889,() =&gt; {<br>  console.log(‘Koa is listening in 8889’);<br>});</p>\n<p>module.exports = app;<br>打开你的控制台，输入node app.js，一切运行正常没有报错的话，大功告成，我们的第一个API已经构建完成！</p>\n<p>如何测试呢？</p>\n<p>API Test<br>接口在跟跟前端对接之前，我们应该先进行一遍测试，防止出现问题。在测试接口的工具上，我推荐Postman，这个工具能够很好的模拟发送的各种请求，方便的查看响应结果，用来进行测试是最好不过了。</p>\n<p>Postman<br>Postman</p>\n<p>测试成功，我发送了正确的url请求，返回的结果也是我想看到的。我们看到返回的结果实际上是个JSON，这对于我们前后端来说都是十分方便处理的数据格式。</p>\n<p>但是如果我们代码出了问题，返回error了我们该怎么测试呢？如果说控制台能够反馈一定的信息，但是绝对不充分，并且我们很可能不知道哪步出错了导致最终结果出问题。</p>\n<p>所以我推荐用VSCode这个工具来帮我们调试nodejs后端的代码。它能够添加断点，能够很方便地查看请求的信息。并且配合上nodemon这类的工具，调试简直不要更舒服。</p>\n<p>关于VSCode的nodejs调试，可以参考官方的这篇文章</p>\n<p>我自己是用Sublime写代码，用VSCode调试，哈哈。</p>\n<p>登录系统的实现<br>刚才实现的不过是一个简单的用户信息查询的接口，但是我们要实现的是一个登录系统，所以还需要做一些工作。</p>\n<p>JSON-WEB-TOKEN<br>基于cookie或者session的登录验证已经屡见不鲜，前段时间JSON-WEB-TOKEN出来后很是风光了一把。引入了它之后，能够实现真正无状态的请求，而不是基于session和cookie的存储式的有状态验证。</p>\n<p>关于JSON-WEB-TOKEN的描述可以参考这篇文章比较简单，我还推荐一篇文章，将如何使用JSON-WEB-TOKEN写得很清楚。</p>\n<p>另外可以在JSON-WEB-TOKEN的官网上感受一下。</p>\n<p>Tips：JSON-WEB-TOKEN分三部分，头部信息+主体信息+密钥信息，其中主体传递的信息（是我们存放我们需要的信息的部分）是用BASE64编码的，所以很容易被解码，一定不能存放明文密码这种关键信息！替代地可以存放一些不是特别关键的信息，比如用户名这样能够做区分的信息。</p>\n<p>简单来说，运用了JSON-WEB-TOKEN的登录系统应该是这样的：</p>\n<p>用户在登录页输入账号密码，将账号密码（密码进行md5加密）发送请求给后端<br>后端验证一下用户的账号和密码的信息，如果符合，就下发一个TOKEN返回给客户端。如果不符合就不发送TOKEN回去，返回验证错误信息。<br>如果登录成功，客户端将TOKEN用某种方式存下来（SessionStorage、LocalStorage）,之后要请求其他资源的时候，在请求头（Header）里带上这个TOKEN进行请求。<br>后端收到请求信息，先验证一下TOKEN是否有效，有效则下发请求的资源，无效则返回验证错误。<br>通过这个TOKEN的方式，客户端和服务端之间的访问，是无状态的：也就是服务端不知道你这个用户到底还在不在线，只要你发送的请求头里的TOKEN是正确的我就给你返回你想要的资源。这样能够不占用服务端宝贵的空间资源，而且如果涉及到服务器集群，如果服务器进行维护或者迁移或者需要CDN节点的分配的话，无状态的设计显然维护成本更低。</p>\n<p>话不多说，我们来把JSON-WEB-TOKEN用到我们的项目中。</p>\n<p>yarn add koa-jwt，安装Koa的JSON-WEB-TOKEN库。</p>\n<p>我们需要在models里的user.js加一个方法，通过用户名查找用户：</p>\n<p>// models/user.js<br>// ……<br>// 前面的省略了</p>\n<p>// 新增一个方法，通过用户名查找<br>const getUserByName = function* (name){<br>  const userInfo = yield User.findOne({<br>    where: {<br>      user_name: name<br>    }<br>  })</p>\n<p>  return userInfo<br>}</p>\n<p>module.exports = {<br>  getUserById, // 导出getUserById的方法，将会在controller里调用<br>  getUserByName<br>}<br>然后我们写一下controllers里的user.js：</p>\n<p>// controllers/user.js</p>\n<p>const user = require(‘../models/user.js’);<br>const jwt = require(‘koa-jwt’); // 引入koa-jwt</p>\n<p>const getUserInfo = function* (){<br>  const id = this.params.id; // 获取url里传过来的参数里的id<br>  const result = yield user.getUserById(id);  // 通过yield “同步”地返回查询结果<br>  this.body = result // 将请求的结果放到response的body里返回<br>}</p>\n<p>const postUserAuth = function* (){<br>  const data = this.request.body; // post过来的数据存在request.body里<br>  const userInfo = yield user.getUserByName(data.name);</p>\n<p>  if(userInfo != null){ // 如果查无此用户会返回null<br>    if(userInfo.password != data.password){<br>      this.body = {<br>        success: false, // success标志位是方便前端判断返回是正确与否<br>        info: ‘密码错误！’<br>      }<br>    }else{ // 如果密码正确<br>      const userToken = {<br>        name: userInfo.user_name,<br>        id: userInfo.id<br>      }<br>      const secret = ‘vue-koa-demo’; // 指定密钥，这是之后用来判断token合法性的标志<br>      const token = jwt.sign(userToken,secret); // 签发token<br>      this.body = {<br>        success: true,<br>        token: token, // 返回token<br>      }<br>    }<br>  }else{<br>    this.body = {<br>      success: false,<br>      info: ‘用户不存在！’ // 如果用户不存在返回用户不存在<br>    }<br>  }<br>}</p>\n<p>module.exports = {<br>  getUserInfo,<br>  postUserAuth<br>}<br>再把routes里的路由规则更新一下：</p>\n<p>// routes/auth.js</p>\n<p>const auth = require(‘../controllers/user.js’);<br>const router = require(‘koa-router’)();</p>\n<p>router.get(‘/user/:id’, auth.getUserInfo); // 定义url的参数是id,用user的auth方法引入router<br>router.post(‘/user’, auth.postUserAuth);</p>\n<p>module.exports = router; // 把router规则暴露出去<br>由此我们写完了用户认证的部分。接下去我们要改写一下前端登录的方法。</p>\n<p>引入Axios<br>之前在学Vue的时候一直用的是vue-resource，不过后来Vue2出来之后，Vue官方不再默认推荐它为官方的ajax网络请求库了。替代地推荐了一些其他的库，比如就有我们今天要用的axios。我之前也没有用过它，不过看完它的star和简要介绍Promise based HTTP client for the browser and node.js，能够同时支持node和浏览器端的ajax请求工具（还是基于Promised的！），我想就有必要用一用啦。</p>\n<p>yarn add axios，安装axios。然后我们在src/main.js里面引入axios：</p>\n<p>// scr/main.js</p>\n<p>// …</p>\n<p>import Axios from ‘axios’</p>\n<p>Vue.prototype.$http = Axios // 类似于vue-resource的调用方法，之后可以在实例里直接用this.$http.get()等</p>\n<p>// …<br>// Login.vue<br>// 省略前面的部分</p>\n<p> methods: {<br>    loginToDo() {<br>      let obj = {<br>        name: this.account,<br>        password: this.password<br>      }<br>      this.$http.post(‘/auth/user’, obj) // 将信息发送给后端<br>        .then((res) =&gt; { // axios返回的数据都在res.data里<br>          if(res.data.success){ // 如果成功<br>            sessionStorage.setItem(‘demo-token’,res.data.token); // 用sessionStorage把token存下来<br>            this.$message({ // 登录成功，显示提示语<br>              type: ‘success’,<br>              message: ‘登录成功！’<br>            });<br>            this.$router.push(‘/todolist’) // 进入todolist页面，登录成功<br>          }else{<br>            this.$message.error(res.data.info); // 登录失败，显示提示语<br>            sessionStorage.setItem(‘demo-token’,null); // 将token清空<br>          }<br>        }, (err) =&gt; {<br>            this.$message.error(‘请求错误！’)<br>            sessionStorage.setItem(‘demo-token’,null); // 将token清空<br>        })<br>    }<br>  }<br>密码bcrypt加密<br>最早的时候我是在前端用了md5加密，但是后来经过提醒这种方式并不安全。md5加密的容易被破解。所以就采用了bcrypt的加密方式。全部走后端加密。也许你会问这样明文给后端发送密码安全吗？没问题，只要用上HTTPS，这将不是问题。</p>\n<p>yarn add bcryptjs安装bcryptjs。</p>\n<p>// controllers/user.js</p>\n<p>const user = require(‘../models/user.js’);<br>const jwt = require(‘koa-jwt’); // 引入koa-jwt<br>const bcrypt = require(‘bcryptjs’);</p>\n<p>const getUserInfo = function* (){<br>  const id = this.params.id; // 获取url里传过来的参数里的id<br>  const result = yield user.getUserById(id);  // 通过yield “同步”地返回查询结果<br>  this.body = result // 将请求的结果放到response的body里返回<br>}</p>\n<p>const postUserAuth = function* (){<br>  const data = this.request.body; // post过来的数据存在request.body里<br>  const userInfo = yield user.getUserByName(data.name);</p>\n<p>  if(userInfo != null){ // 如果查无此用户会返回null<br>    if(!bcrypt.compareSync(data.password, userInfo.password)){ // 验证密码是否正确<br>      this.body = {<br>        success: false, // success标志位是方便前端判断返回是正确与否<br>        info: ‘密码错误！’<br>      }<br>    }else{ // 如果密码正确<br>      const userToken = {<br>        name: userInfo.user_name,<br>        id: userInfo.id<br>      }<br>      const secret = ‘vue-koa-demo’; // 指定密钥，这是之后用来判断token合法性的标志<br>      const token = jwt.sign(userToken,secret); // 签发token<br>      this.body = {<br>        success: true,<br>        token: token, // 返回token<br>      }<br>    }<br>  }else{<br>    this.body = {<br>      success: false,<br>      info: ‘用户不存在！’ // 如果用户不存在返回用户不存在<br>    }<br>  }<br>}</p>\n<p>module.exports = {<br>  getUserInfo,<br>  postUserAuth<br>}<br>因为我们数据库里还是存着明文的123作为密码，现在要先将它bcrypt化，加密后变为：$2a$10$x3f0Y2SNAmyAfqhKVAV.7uE7RHs3FDGuSYw.LlZhOFoyK7cjfZ.Q6，将其替换掉数据库里的123。不做这步我们将无法登录。</p>\n<p>还没有大功告成，因为我们的界面跑在8080端口，但是Koa提供的API跑在8889端口，所以如果直接通过/auth/user这个url去post是请求不到的。就算写成localhost:8889/auth/user也会因为跨域问题导致请求失败。</p>\n<p>这个时候有两种最方便的解决办法：</p>\n<p>如果是跨域，服务端只要在请求头上加上CORS，客户端即可跨域发送请求。<br>变成同域，即可解决跨域请求问题。<br>第一种也很方便，采用kcors即可解决。<br>不过为了之后部署方便，我们采用第二种，变成同域请求。</p>\n<p>打开根目录下的config/index.js，找到dev下的proxyTable，利用这个proxyTable我们能够将外部的请求通过webpack转发给本地，也就能够将跨域请求变成同域请求了。</p>\n<p>将proxyTable改写如下:</p>\n<p> proxyTable: {<br>  ‘/auth’:{<br>    target: ‘<a href=\"http://localhost:8889\">http://localhost:8889</a>‘,<br>    changeOrigin: true<br>  },<br>  ‘/api’:{<br>    target: ‘<a href=\"http://localhost:8889\">http://localhost:8889</a>‘,<br>    changeOrigin: true<br>  }<br>}<br>上面的意思是，我们在组件里请求的地址如果是/api/xxxx实际上请求的是<a href=\"http://localhost:8889/api/xxxx，但是由于webpack帮我们代理了localhost的8889端口的服务，所以我们可以把实际是跨域的请求当做是同域下的接口来调用。\">http://localhost:8889/api/xxxx，但是由于webpack帮我们代理了localhost的8889端口的服务，所以我们可以把实际是跨域的请求当做是同域下的接口来调用。</a></p>\n<p>此时重新启动一下webpack：先ctrl+c退出当前进程，然后npm run dev。</p>\n<p>一切都万事了之后，我们可以看到如下激动人心的画面：</p>\n<p>login2todolist<br>login2todolist</p>\n<p>跳转拦截<br>虽然我们现在能够成功登录系统了，但是还是存在一个问题：我在地址栏手动将地址改为localhost:8080/todolist我还是能够成功跳转到登录后的界面啊。于是这就需要一个跳转拦截，当没有登录的时候，不管地址栏输入什么地址，最终都重新定向回登录页。</p>\n<p>这个时候，从后端给我们传回来的token就派上大用处。有token就说明我们的身份是经过验证的，否则就是非法的。</p>\n<p>vue-router提供了页面跳转的钩子，我们可以在router跳转前进行验证，如果token存在就跳转，如果不存在就返回登录页。</p>\n<p>参考路由的导航钩子</p>\n<p>打开src/main.js，修改如下：</p>\n<p>// src/main.js</p>\n<p>// …</p>\n<p>const router = new VueRouter({….}) // 省略</p>\n<p>router.beforeEach((to,from,next) =&gt;{<br>  const token = sessionStorage.getItem(‘demo-token’);<br>  if(to.path == ‘/‘){ // 如果是跳转到登录页的<br>    if(token != ‘null’ &amp;&amp; token != null){<br>      next(‘/todolist’) // 如果有token就转向todolist不返回登录页<br>    }<br>    next(); // 否则跳转回登录页<br>  }else{<br>    if(token != ‘null’ &amp;&amp; token != null){<br>      next() // 如果有token就正常转向<br>    }else{<br>      next(‘/‘) // 否则跳转回登录页<br>    }<br>  }<br>})</p>\n<p>const app = new Vue({…}) // 省略<br>注意：一定要确保要调用 next() 方法，否则钩子就不会被 resolved。如果纯粹调用next(path)这样的方法最终还是会回到.beforeEach()这个钩子里面来，如果没有写对条件就有可能出现死循环，栈溢出的情况。</p>\n<p>然后我们就可以看到如下效果：</p>\n<p>login2todolist<br>login2todolist</p>\n<p>Tips：这种只判断token存不存在就通过的验证是很不安全的，此例只是做了一个演示，实际上还应该进行更深一层的判断，比如从token解包出来的信息里包含我们想要的信息才可以作为有效token，才可以登录。等等。本文只是做一个简要介绍。</p>\n<p>解析token<br>注意到我们在签发token的时候，写过这样几句话：</p>\n<p>// server/controllers/user.js</p>\n<p>// …</p>\n<p>const userToken = {<br>  name: userInfo.user_name,<br>  id: userInfo.id<br>}<br>const secret = ‘vue-koa-demo’; // 指定密钥，这是之后用来判断token合法性的标志<br>const token = jwt.sign(userToken,secret); // 签发token</p>\n<p>// …<br>我们将用户名和id打包进JWT的主体部分，同时我们解密的密钥是vue-koa-demo。所以我们可以通过这个信息，来进行登录后的用户名显示，以及用来区别这个用户是谁，这个用户有哪些Todolist。</p>\n<p>接下来在Todolist页面进行token解析，从而让用户名显示为登录用户名。</p>\n<p>注意： 前端直接暴露secret-key的做法其实并不安全。正确的做法应该是把token跟用户名和其他不是很重要的信息一起传过来，token只用于验证，而其他信息作为返回值正常返回。这样就不会暴露secret-key了。当然本文只是为了方便说明，给出的一个不恰当的获取用户信息的例子。</p>\n<p>// src/components/TodoList.vue</p>\n<p>// …</p>\n<p>import jwt from ‘jsonwebtoken’ // 我们安装koa-jwt的时候会自动下载这个依赖</p>\n<p>export default {</p>\n<p>  created(){ // 组件创建时调用<br>    const userInfo = this.getUserInfo(); // 新增一个获取用户信息的方法<br>    if(userInfo != null){<br>      this.id = userInfo.id;<br>      this.name = userInfo.name;<br>    }else{<br>      this.id = ‘’;<br>      this.name = ‘’<br>    }<br>  },</p>\n<p>  data () {<br>    return {<br>      name: ‘’, // 用户名改为空<br>      todos: ‘’,<br>      activeName: ‘first’,<br>      list:[],<br>      count: 0,<br>      id: ‘’ // 新增用户id属性，用于区别用户<br>    };<br>  },<br>  computed: {…}, //省略</p>\n<p>  methods: {<br>    addTodos() {…}, // 省略<br>    finished(index) {…},<br>    remove(index) {…},<br>    restore(index) {…},<br>    getUserInfo(){ // 获取用户信息<br>      const token = sessionStorage.getItem(‘demo-token’);<br>      if(token != null &amp;&amp; token != ‘null’){<br>        let decode = jwt.decode(token); // 解析token<br>        return decode // decode解析出来实际上就是{name: XXX,id: XXX}<br>      }else {<br>        return null<br>      }<br>    }<br>  }<br>};</p>\n<p>// …<br>于是你就可以看到：</p>\n<p>todolist<br>todolist</p>\n<p>用户名已经不是我们之前默认的Molunerfinn而是登录名molunerfinn了。</p>\n<p>Todolist 增删改查的实现<br>这个部分就是前后端协作了。我们要实现之前在纯前端部分实现的内容。我以最基本的两个方法来举例子：获取Todolist以及增加Todolist，剩下其实思路大同小异，我就提供代码和注释了，我相信也很容易懂。</p>\n<p>Token的发送<br>之前说了，用JSON-WEB-TOKEN之后，这个系统的验证就完全依靠token了。如果token正确就下发资源，如果资源不正确，就返回错误信息。</p>\n<p>因为我们用了koa-jwt，所以只需要在每条请求头上加上Authorization属性，值是Bearer {token值}，然后让Koa在接收请求之前验证一下token即可。但是如果每发一条请求就要手动写一句这个，太累了。于是我们可以做到全局Header设定。</p>\n<p>打开src/main.js，在路由跳转的钩子里加上这句：</p>\n<p>// scr/main.json</p>\n<p>router.beforeEach((to,from,next) =&gt;{<br>  const token = sessionStorage.getItem(‘demo-token’);<br>  if(to.path == ‘/‘){<br>    if(token != ‘null’ &amp;&amp; token != null){<br>      next(‘/todolist’)<br>    }<br>    next();<br>  }else{<br>    if(token != ‘null’ &amp;&amp; token != null){<br>      Vue.prototype.$http.defaults.headers.common[‘Authorization’] = ‘Bearer ‘ + token; // 全局设定header的token验证，注意Bearer后有个空格<br>      next()<br>    }else{<br>      next(‘/‘)<br>    }<br>  }<br>})<br>这样就完成了token的客户端发送设定。</p>\n<p>Koa端对Token的验证<br>接着我们实现两个简单的api，这两个api请求的路径就不是/auth/xxx而是/api/xxx了。我们还需要实现，访问/api/<em>路径的请求都需要经过koa-jwt的验证，而/auth/</em>的请求不需要。</p>\n<p>首先去models目录下新建一个todolist.js的文件：</p>\n<p>// server/models/todolist.js</p>\n<p>const db = require(‘../config/db.js’),<br>      todoModel = ‘../schema/list.js’; // 引入todolist的表结构<br>const TodolistDb = db.Todolist; // 引入数据库</p>\n<p>const Todolist = TodolistDb.import(todoModel); </p>\n<p>const getTodolistById = function* (id){  // 获取某个用户的全部todolist<br>  const todolist = yield Todolist.findAll({ // 查找全部的todolist<br>    where: {<br>      user_id: id<br>    },<br>    attributes: [‘id’,’content’,’status’] // 只需返回这三个字段的结果即可<br>  });</p>\n<p>  return todolist // 返回数据<br>}</p>\n<p>const createTodolist = function* (data){ // 给某个用户创建一条todolist<br>  yield Todolist.create({<br>    user_id: data.id, // 用户的id，用来确定给哪个用户创建<br>    content: data.content,<br>    status: data.status<br>  })<br>  return true<br>}</p>\n<p>module.exports = {<br>  getTodolistById,<br>  createTodolist<br>}<br>接着去controllers目录下新建一个todolist.js的文件：</p>\n<p>// server/controllers/todolist</p>\n<p>const todolist = require(‘../models/todolist.js’);</p>\n<p>const getTodolist = function* (){ // 获取某个用户的所有todolist<br>  const id = this.params.id; // 获取url里传过来的参数里的id<br>  const result = yield todolist.getTodolistById(id);  // 通过yield “同步”地返回查询结果<br>  this.body = result // 将请求的结果放到response的body里返回<br>}</p>\n<p>const createTodolist = function* (){ // 给某个用户创建一条todolist<br>  const data = this.request.body; // post请求，数据是在request.body里的<br>  const result = yield todolist.createTodolist(data);</p>\n<p>  this.body = {<br>    success: true<br>  }<br>}</p>\n<p>module.exports = {<br>  getTodolist,<br>  createTodolist<br>}<br>然后去routes文件夹里新建一个api.js文件：</p>\n<p>// server/routes/api.js</p>\n<p>const todolist = require(‘../controllers/todolist.js’);<br>const router = require(‘koa-router’)();</p>\n<p>todolist(router); // 引入koa-router</p>\n<p>module.exports = router; // 导出router规则<br>最后，去根目录下的app.js，给koa加上新的路由规则：</p>\n<p>// app.js</p>\n<p>const app = require(‘koa’)()<br>  , koa = require(‘koa-router’)()<br>  , json = require(‘koa-json’)<br>  , logger = require(‘koa-logger’)<br>  , auth = require(‘./server/routes/auth.js’)<br>  , api = require(‘./server/routes/api.js’)<br>  , jwt = require(‘koa-jwt’);</p>\n<p>// ….. 省略</p>\n<p>app.use(function* (next){<br>  let start = new Date;<br>  yield next;<br>  let ms = new Date - start;<br>  console.log(‘%s %s - %s’, this.method, this.url, ms);<br>});</p>\n<p>app.use(function *(next){  //  如果JWT验证失败，返回验证失败信息<br>  try {<br>    yield next;<br>  } catch (err) {<br>    if (401 == err.status) {<br>      this.status = 401;<br>      this.body = {<br>        success: false,<br>        token: null,<br>        info: ‘Protected resource, use Authorization header to get access’<br>      };<br>    } else {<br>      throw err;<br>    }<br>  }<br>});</p>\n<p>app.on(‘error’, function(err, ctx){<br>  console.log(‘server error’, err);<br>});</p>\n<p>koa.use(‘/auth’, auth.routes()); // 挂载到koa-router上，同时会让所有的auth的请求路径前面加上’/auth’的请求路径。<br>koa.use(“/api”,jwt({secret: ‘vue-koa-demo’}),api.routes()) // 所有走/api/打头的请求都需要经过jwt中间件的验证。secret密钥必须跟我们当初签发的secret一致</p>\n<p>app.use(koa.routes()); // 将路由规则挂载到Koa上。</p>\n<p>// …省略<br>至此，后端的两个api已经构建完成。</p>\n<p>初始化配置相对复杂一些，涉及到model、controllers、routes和app.js，可能会让人望而却步。实际上第一次构建完成之后，后续要添加api，基本上只需要在model和controllers写好方法，定好接口即可，十分方便。</p>\n<p>前端对接接口<br>后端接口已经开放，接下来要把前端和后端进行对接。主要有两个对接接口：</p>\n<p>获取某个用户的所有todolist<br>创建某个用户的一条todolist<br>接下来就是改写Todolist.vue里的方法了：</p>\n<p>// todolist.js</p>\n<p>// … 省略</p>\n<p>created(){<br>  const userInfo = this.getUserInfo();<br>  if(userInfo != null){<br>    this.id = userInfo.id;<br>    this.name = userInfo.name;<br>  }else{<br>    this.id = ‘’;<br>    this.name = ‘’<br>  }<br>  this.getTodolist(); // 新增：在组件创建时获取todolist<br>},</p>\n<p>// … 省略</p>\n<p>methods: {<br>  addTodos() {<br>    if(this.todos == ‘’)<br>      return<br>    let obj = {<br>      status: false,<br>      content: this.todos,<br>      id: this.id<br>    }<br>    this.$http.post(‘/api/todolist’, obj) // 新增创建请求<br>      .then((res) =&gt; {<br>        if(res.status == 200){ // 当返回的状态为200成功时<br>          this.$message({<br>            type: ‘success’,<br>            message: ‘创建成功！’<br>          })<br>          this.getTodolist(); // 获得最新的todolist<br>        }else{<br>          this.$message.error(‘创建失败！’) // 当返回不是200说明处理出问题<br>        }<br>      }, (err) =&gt; {<br>        this.$message.error(‘创建失败！’) // 当没有返回值说明服务端错误或者请求没发送出去<br>        console.log(err)<br>      })<br>    this.todos = ‘’; // 将当前todos清空<br>  },<br>  // … 省略一些方法<br>  getTodolist(){<br>    this.$http.get(‘/api/todolist/‘ + this.id) // 向后端发送获取todolist的请求<br>      .then((res) =&gt; {<br>        if(res.status == 200){<br>          this.list = res.data // 将获取的信息塞入实例里的list<br>        }else{<br>          this.$message.error(‘获取列表失败！’)<br>        }<br>      }, (err) =&gt; {<br>        this.$message.error(‘获取列表失败！’)<br>        console.log(err)<br>      })<br>  }<br>}<br>至此，前后端的部分已经完整构建。让我们来看看效果：</p>\n<p>todolist<br>todolist</p>\n<p>做到这一步的时候其实我们的应用已经基本完成了。最后的收尾工作，让我们来收一下。</p>\n<p>原本的前端版本还有完成、删除、还原三种状态，其中完成和还原只是状态的切换（更新），所以可以算是一个api，然后就是删除是单独一个api。于是我们就能算是完成了增、删、改、查了。接下去的部分就提供代码就行，其实思路跟之前的是一样的，只不过操作的函数不一样罢了。</p>\n<p>Todolist的改、删</p>\n<p>// server/models/todolist.js</p>\n<p>// …省略</p>\n<p>const removeTodolist = function* (id,user_id){<br>  yield Todolist.destroy({<br>    where: {<br>      id,<br>      user_id<br>    }<br>  })<br>  return true<br>}</p>\n<p>const updateTodolist = function* (id,user_id,status){<br>  yield Todolist.update(<br>    {<br>      status<br>    },<br>    {<br>      where: {<br>        id,<br>        user_id<br>      }<br>    }<br>  )<br>  return true<br>}</p>\n<p>module.exports = {<br>  getTodolistById,<br>  createTodolist,<br>  removeTodolist,<br>  updateTodolist<br>}</p>\n<p>// server/controllers/todolist.js</p>\n<p>// … 省略</p>\n<p>const removeTodolist = function* (){<br>  const id = this.params.id;<br>  const user_id = this.params.userId;<br>  const result = yield todolist.removeTodolist(id,user_id);</p>\n<p>  this.body = {<br>    success: true<br>  }<br>}</p>\n<p>const updateTodolist = function* (){<br>  const id = this.params.id;<br>  const user_id = this.params.userId;<br>  let status = this.params.status;<br>  status == ‘0’ ? status = true : status =  false;// 状态反转（更新）</p>\n<p>  const result = yield todolist.updateTodolist(id,user_id,status);</p>\n<p>  this.body = {<br>    success: true<br>  }<br>}</p>\n<p>module.exports = (router) =&gt; {<br>  getTodolist,<br>  createTodolist,<br>  removeTodolist,<br>  updateTodolist<br>}<br> &lt;!-- src/components/TodoList.vue --&gt;</p>\n<p>….</p>\n<p>&lt;!-- 把完成和还原的方法替换成了update --&gt;\n</p>\n<p>&lt;el-button size=&quot;small&quot; type=&quot;primary&quot; <a href=\"https://github.com/click\" title=\"&#64;click\" class=\"at-link\">@click</a>=&quot;update(index)&quot;&gt;完成&lt;/el-button&gt;<br>….</p>\n<p>&lt;el-button size=&quot;small&quot; type=&quot;primary&quot; <a href=\"https://github.com/click\" title=\"&#64;click\" class=\"at-link\">@click</a>=&quot;update(index)&quot;&gt;还原&lt;/el-button&gt;<br>….</p>\n<p>&lt;script&gt;<br>// ….省略<br>  methods:{<br>    // … 省略<br>    update(index) {<br>      this.$http.put(‘/api/todolist/‘+ this.id + ‘/‘ + this.list[index].id + ‘/‘ + this.list[index].status)<br>        .then((res) =&gt; {<br>          if(res.status == 200){<br>            this.$message({<br>              type: ‘success’,<br>              message: ‘任务状态更新成功！’<br>            })<br>            this.getTodolist();<br>          }else{<br>            this.$message.error(‘任务状态更新失败！’)<br>          }<br>        }, (err) =&gt; {<br>          this.$message.error(‘任务状态更新失败！’)<br>          console.log(err)<br>        })<br>    },<br>    remove(index) {<br>      this.$http.delete(‘/api/todolist/‘+ this.id + ‘/‘ + this.list[index].id)<br>        .then((res) =&gt; {<br>          if(res.status == 200){<br>            this.$message({<br>              type: ‘success’,<br>              message: ‘任务删除成功！’<br>            })<br>            this.getTodolist();<br>          }else{<br>            this.$message.error(‘任务删除失败！’)<br>          }<br>        }, (err) =&gt; {<br>          this.$message.error(‘任务删除失败！’)<br>          console.log(err)<br>        })<br>    },<br>  }<br>// … 省略<br>&lt;/script&gt;<br>….<br>让我们来看看最后99%成品的效果吧：</p>\n<p>Todolist<br>Todolist</p>\n<p>项目部署<br>很多教程到类似于我上面的部分就结束了。但是实际上我们做一个项目最想要的就是部署给大家用不是么？</p>\n<p>在部署这块有些坑，需要让大家也一起知道一下。这个项目是个全栈项目（虽然是个很简单的。。。），所以就涉及到前后端通信的问题，也就会涉及到是同域请求还是跨域请求。</p>\n<p>我们也说过，要解决这个问题有两种方便的解决办法，第一种，服务端加上cors，客户端就可以随意的跨域请求。但是这样会有个问题，因为我们是以同域的形式开发，请求的地址也是写的相对地址：/api/<em>、auth/</em>这样的路径，访问的路径的自然是同域。如果要在服务端加上cors，我们还需要将我们的所有请求地址改成localhost:8889/api/<em>，localhost:8889/auth/</em>，这样的话，如果服务端的端口号一变，我们还需要重新修改前端所有的请求地址。这样很不方便也很不科学。</p>\n<p>因此，要将请求变为同域才是最好的解决办法——不管服务端端口号怎么变，只要是同域都可以请求到。</p>\n<p>于是要把Vue和Koa结合起来变成一个完整的项目（之前实际上都是在开发模式下，webpack帮我们进行请求的代理转发，所以看起来像是同域请求，而Vue和Koa并没有完全结合起来），就得在生产模式下，将Vue的静态文件交给Koa“托管”，所有访问前端的请求全部走Koa端，包括静态文件资源的请求，也走Koa端，把Koa作为一个Vue项目的静态资源服务器，这样就可以让Vue里的请求走的都是同域了。（相当于，之前开发模式是webpack开启了一个服务器托管了Vue的资源和请求，现在生产模式下改成Koa托管Vue的资源和请求）</p>\n<p>要在开发和生产模式改变不同的托管服务器，其实也很简单，只需要在生产模式下，用Koa的静态资源服务中间件托管构建好的Vue文件即可。</p>\n<p>Webpack打包<br>部署之前我们要用Webpack将我们的前端项目打包输出一下。但是如果直接用npm run build，你会发现打包出来的文件太大了：</p>\n<pre><code>                                              Asset       Size  Chunks             Chunk Names\nstatic/css/app.d9034fc06fd57ce00d6e75ed49f0dafe.css     120 kB    2, 0  [emitted]  app\n             static/fonts/element-icons.a61be9c.eot    13.5 kB          [emitted]\n               static/img/element-icons.09162bc.svg    17.4 kB          [emitted]\n         static/js/manifest.8ea250834bdc80e4d73b.js  832 bytes       0  [emitted]  manifest\n           static/js/vendor.75bbe7ecea37b0d4c62d.js     623 kB    1, 0  [emitted]  vendor\n              static/js/app.e2d125562bfc4c57f9cb.js    16.5 kB    2, 0  [emitted]  app\n             static/fonts/element-icons.b02bdc1.ttf    13.2 kB          [emitted]\n     static/js/manifest.8ea250834bdc80e4d73b.js.map    8.86 kB       0  [emitted]  manifest\n       static/js/vendor.75bbe7ecea37b0d4c62d.js.map    3.94 MB    1, 0  [emitted]  vendor\n          static/js/app.e2d125562bfc4c57f9cb.js.map    64.8 kB    2, 0  [emitted]  app\n</code></pre><p>static/css/app.d9034fc06fd57ce00d6e75ed49f0dafe.css.map     151 kB    2, 0  [emitted]  app<br>                                             index.html  563 bytes          [emitted]<br>竟然有3.94MB的map文件。这肯定是不能接受的。于是要修改一下webpack的输出的设置，取消输出map文件。</p>\n<p>找到根目录下的config/index.js：把productionSourceMap: true这句话改成productionSourceMap: false。然后再执行一遍npm run build。</p>\n<pre><code>                                          Asset       Size  Chunks             Chunk Names\n         static/fonts/element-icons.a61be9c.eot    13.5 kB          [emitted]\n         static/fonts/element-icons.b02bdc1.ttf    13.2 kB          [emitted]\n           static/img/element-icons.09162bc.svg    17.4 kB          [emitted]\n     static/js/manifest.3ba218c80028a707a728.js  774 bytes       0  [emitted]  manifest\n       static/js/vendor.75bbe7ecea37b0d4c62d.js     623 kB    1, 0  [emitted]  vendor\n          static/js/app.b6acaca2531fc0baa447.js    16.5 kB    2, 0  [emitted]  app\n</code></pre><p>static/css/app.d9034fc06fd57ce00d6e75ed49f0dafe.css     120 kB    2, 0  [emitted]  app<br>                                         index.html  563 bytes          [emitted]<br>把sourceMap去掉了之后，体积就小下来了。虽然600+kb的大小还是有点大，不过放到服务端，gzip之后只剩150+kb的体积勉强还是可以接受。当然，对于webpack输出的优化，不是本文讨论的范围，有很多更好的文章讲述了这个东西，故本文不再详细展开。</p>\n<p>打包好后就是相当于输出了一堆静态文件，当然这堆静态文件需要放在服务端才可以访问。我们要将这堆静态资源用Koa托管。</p>\n<p>Koa serve静态资源<br>yarn add koa-static</p>\n<p>打开app.js，引入两个新依赖，其中path是nodejs原生自带。</p>\n<p>// app.js</p>\n<p>// ….<br>const path =require(‘path’)<br>    , serve = require(‘koa-static’);<br>// ….</p>\n<p>// 静态文件serve在koa-router的其他规则之上<br>app.use(serve(path.resolve(‘dist’))); // 将webpack打包好的项目目录作为Koa静态文件服务的目录</p>\n<p>// 下面这些是之前就有的。。。为了方便找位置故标示出来<br>koa.use(‘/auth’, auth.routes());<br>koa.use(“/api”,jwt({secret: ‘vue-koa-demo’}),api.routes()) </p>\n<p>// …<br>然后重新运行一遍node app.js，看到输出Koa is listening in 8889后，你可以打开浏览器localhost:8889就可以看到如下情景：</p>\n<p>vue-koa<br>vue-koa</p>\n<p>至此已经基本上接近尾声，不过还存在一个问题：如果我们登录进去之后，在todolist页面一刷新，就会出现：</p>\n<p>404<br>404</p>\n<p>为什么会出现这种情况？简单来说是因为我们使用了前端路由，用了HTML5 的History模式，如果没有做其他任何配置的话，刷新页面，那么浏览器将会去服务端访问这个页面地址，因为服务端并没有配置这个地址的路由，所以自然就返回404 Not Found了。</p>\n<p>详细可以参考vue-router的这篇文档</p>\n<p>该怎么解决？其实也很简单，多加一个中间件：koa-history-api-fallback即可.</p>\n<p>yarn add koa-history-api-fallback</p>\n<p>//… 省略</p>\n<p>const historyApiFallback = require(‘koa-history-api-fallback’); // 引入依赖</p>\n<p>app.use(require(‘koa-bodyparser’)());<br>app.use(json());<br>app.use(logger());<br>app.use(historyApiFallback()); // 在这个地方加入。一定要加在静态文件的serve之前，否则会失效。</p>\n<p>// …<br>这个时候，你再重新启动一下koa，登录之后再刷新页面，就不会再出现404 Not Found了。</p>\n<p>API Test<br>本来写到上面基本本文已经算是结束了。但是由于我在开发的过程中遇到了一些问题，所以还需要做一些微调。</p>\n<p>我们知道koa的use方法是有顺序只差的。</p>\n<p>const app = require(‘koa’);<br>app.use(A);<br>app.use(B);<br>const app = require(‘koa’);<br>app.use(B);<br>app.use(A);<br>这二者是有区别的，谁先被use，谁的规则就放到前面先执行。</p>\n<p>因此如果我们将静态文件的serve以及historyApiFallback放在了api的请求之前，那么用postman测试api的时候总会先返回完整的页面：</p>\n<p>postman<br>postman</p>\n<p>因此正确的做法，应该是将它们放到我们写的api的规则之后：</p>\n<p>// app.js<br>// …</p>\n<p>koa.use(‘/auth’, auth.routes()); // 挂载到koa-router上，同时会让所有的auth的请求路径前面加上’/auth’的请求路径。<br>koa.use(“/api”,jwt({secret: ‘vue-koa-demo’}),api.routes()) // 所有走/api/打头的请求都需要经过jwt验证。</p>\n<p>app.use(koa.routes()); // 将路由规则挂载到Koa上。</p>\n<p>app.use(historyApiFallback()); // 将这两个中间件挂载在api的路由之后<br>app.use(serve(path.resolve(‘dist’))); // 将webpack打包好的项目目录作为Koa静态文件服务的目录<br>这样就能正常返回数据了。</p>\n<p>Nginx配置<br>真正部署到服务器的时候，我们肯定不会让大家输入域名:8889这样的方式让大家访问。所以需要用Nginx监听80端口，把访问我们指定域名的请求引导转发给Koa服务端。</p>\n<p>大致的nginx.conf如下：</p>\n<p>http {</p>\n<h1 id=\"h1--\"><a name=\"….\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>….</h1><p>  upstream koa.server{<br>    server 127.0.0.1:8889;<br>  }</p>\n<p>  server {<br>    listen   80;<br>    server_name xxx.xxx.com;</p>\n<pre><code>location / {\n  proxy_pass http://koa.server;\n  proxy_redirect off;\n}\n\n#....\n</code></pre><p>  }</p>\n<h1 id=\"h1--\"><a name=\"….\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>….</h1><p>}<br>如果有精力还可以配置一下Nginx的Gzip，能让请求的JSCSSHTML等静态文件更小，响应速度更快些。</p>\n<p>写在最后<br>至此，我们已经完成了一个从前端到后端，从本地到服务器的完整项目。虽然它真的是个很简单的小东西，被大家也已经用其他的方式写烂了（比如用localStorage做存储）。但是它作为一个完整的前后端的DEMO，我觉得让大家入门也相对更容易一些，能够体会到全栈开发也不是想象中的“那么难”（入门的难度还是可以接受的嘛）。有了Nodejs之后我们能够做的事真的好多！</p>\n<p>当然，由于篇幅有限，本文能够讲述东西毕竟不够多，而且讲的东西也不可能面面俱到，很多东西都是点到即止，让大家能够自己发挥。其实还想讲讲Event Bus的简单使用，还有分页的基本实现等等，东西太多了，一时间大家消化不了。</p>\n<p>实际上我在做前段时间的项目的时候，也是完全不知道怎么把Vue和Koa结合起来开发。我甚至不知道怎么用Koa来提供API，我只会用Koa来做服务端渲染，比如那些JADEEJS等模板引擎渲染的页面。所以之前那个项目做完让我自己学到良多东西，故而也分享给大家。</p>\n<p>实际上本文的Koa的api提供的形式也尽量和RESTful靠拢了，因此你也可以学会如何通过Koa提供RESTful形式的API了。</p>\n<p>最后放上本文项目的Github地址，如果这个项目对你有帮助，希望大家可以fork，给我提建议，如果再有时间，可以点个Star那就更好啦~</p>\n<p>另外，本文的版本是用Koa1写成的。仓库已经更新Koa2。从Koa1-&gt;Koa2并没有什么难度，其实很关键的两点是：</p>\n<p>用async await替代yield generation<br>用koa2的中间件替代koa1的中间件，原因同上一条<br>互相学习，如果能从这个项目里学到东西我就很开心啦~</p>\n', '0', '0', null, '2019-10-11 08:50:23', null);
INSERT INTO `blogs` VALUES ('904CB31C', 'BD4E76C0', '555', '### vvvvvvv\ndjiejdljdfl\n## #  deidjkl\nJDIej \n$S_2=S$', '0', '0', null, '2019-10-28 18:04:28', '2019-10-28 18:04:28');
INSERT INTO `blogs` VALUES ('976A8ACF', 'F7BBA498', '测试目录', '<h2 id=\"h2-u7B2Cu4E00u7AE0\"><a name=\"第一章\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>第一章</h2><p>是是是</p>\n<h2 id=\"h2-u7B2Cu4E8Cu7AE0\"><a name=\"第二章\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>第二章</h2><p>2222</p>\n<h2 id=\"h2-u7B2Cu4E09u7AE0\"><a name=\"第三章\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>第三章</h2>', '0', '0', null, '2019-10-15 15:12:21', '2019-10-15 15:12:21');
INSERT INTO `blogs` VALUES ('AEE5DC6D', 'BD4E76C0', '测试MarkDown', '<h1 id=\"h1-editor-md\"><a name=\"Editor.md\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Editor.md</h1><p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\" alt=\"\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\" alt=\"\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\" alt=\"\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<div class=\"editormd-toc-menu\"><div class=\"markdown-toc editormd-markdown-toc\">[TOCM]</div></div><br/><div class=\"markdown-toc editormd-markdown-toc\">[TOC]</div><h1 id=\"h1-heading-1\"><a name=\"Heading 1\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 1</h1><h2 id=\"h2-heading-2\"><a name=\"Heading 2\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 2</h2><h3 id=\"h3-heading-3\"><a name=\"Heading 3\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 3</h3><h4 id=\"h4-heading-4\"><a name=\"Heading 4\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 4</h4><h5 id=\"h5-heading-5\"><a name=\"Heading 5\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 5</h5><h6 id=\"h6-heading-6\"><a name=\"Heading 6\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 6</h6><h1 id=\"h1-heading-1-link-heading-link\"><a name=\"Heading 1 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"h2-heading-2-link-heading-link\"><a name=\"Heading 2 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"h3-heading-3-link-heading-link\"><a name=\"Heading 3 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"h4-heading-4-link-heading-link-heading-link-heading-link\"><a name=\"Heading 4 link   Heading link  Heading link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"h5-heading-5-link-heading-link\"><a name=\"Heading 5 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"h6-heading-6-link-heading-link\"><a name=\"Heading 6 link   Heading link\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6><h4 id=\"h4--heading-underline-\"><a name=\"标题（用底线的形式）Heading (underline)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>标题（用底线的形式）Heading (underline)</h4><h1 id=\"h1-this-is-an-h1\"><a name=\"This is an H1\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>This is an H1</h1><h2 id=\"h2-this-is-an-h2\"><a name=\"This is an H2\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>This is an H2</h2><h3 id=\"h3-u5B57u7B26u6548u679Cu548Cu6A2Au7EBFu7B49\"><a name=\"字符效果和横线等\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>字符效果和横线等</h3><hr>\n<p><del>删除线</del> &lt;s&gt;删除线（开启识别HTML标签时）&lt;/s&gt;<br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>\n<p>上标：X&lt;sub&gt;2&lt;/sub&gt;，下标：O&lt;sup&gt;2&lt;/sup&gt;</p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The &lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title=&quot;World Wide Web Consortium&quot;&gt;W3C&lt;/abbr&gt;.</p>\n<h3 id=\"h3--blockquotes\"><a name=\"引用 Blockquotes\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"h3--links\"><a name=\"锚点与链接 Links\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>锚点与链接 Links</h3><p><a href=\"http://localhost/\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\">锚点链接</a> </p>\n<p><a href=\"mailto:test.test@gmail.com\"\">mailto:test.test&#64;gmail.com</a></p>\n<p>GFM a-tail link <a href=\"https://github.com/pandao\" title=\"&#64;pandao\" class=\"at-link\">@pandao</a>  邮箱地址自动链接 <a href=\"mailto:test.test@gmail.com\">test.test@gmail.com</a>  <a href=\"mailto:www@vip.qq.com\">www@vip.qq.com</a></p>\n<blockquote>\n<p><a href=\"https://github.com/pandao\" title=\"&#64;pandao\" class=\"at-link\">@pandao</a></p>\n</blockquote>\n<h3 id=\"h3--codes\"><a name=\"多语言代码高亮 Codes\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>多语言代码高亮 Codes</h3><h4 id=\"h4--inline-code\"><a name=\"行内代码 Inline code\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"h4-u7F29u8FDBu98CEu683C\"><a name=\"缩进风格\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre><p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre><h4 id=\"h4-js-\"><a name=\"JS代码\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>JS代码　</h4><pre><code class=\"lang-javascript\">function test() {\n    console.log(&quot;Hello world!&quot;);\n}\n\n(function(){\n    var box = function() {\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log(&#39;box.init()&#39;);\n\n            return this;\n        },\n\n        add : function(str) {\n            alert(&quot;add&quot;, str);\n\n            return this;\n        },\n\n        remove : function(str) {\n            alert(&quot;remove&quot;, str);\n\n            return this;\n        }\n    };\n\n    box.fn.init.prototype = box.fn;\n\n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(&quot;jQuery&quot;).remove(&quot;jQuery&quot;);\n</code></pre>\n<h4 id=\"h4-html-html-codes\"><a name=\"HTML 代码 HTML codes\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>HTML 代码 HTML codes</h4><pre><code class=\"lang-html\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;mate charest=&quot;utf-8&quot; /&gt;\n        &lt;meta name=&quot;keywords&quot; content=&quot;Editor.md, Markdown, Editor&quot; /&gt;\n        &lt;title&gt;Hello world!&lt;/title&gt;\n        &lt;style type=&quot;text/css&quot;&gt;\n            body{font-size:14px;color:#444;font-family: &quot;Microsoft Yahei&quot;, Tahoma, &quot;Hiragino Sans GB&quot;, Arial;background:#fff;}\n            ul{list-style: none;}\n            img{border:none;vertical-align: middle;}\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1 class=&quot;text-xxl&quot;&gt;Hello world!&lt;/h1&gt;\n        &lt;p class=&quot;text-green&quot;&gt;Plain text&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"h3--images\"><a name=\"图片 Images\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\" alt=\"\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\" alt=\"\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"h3--lists\"><a name=\"列表 Lists\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>列表 Lists</h3><h4 id=\"h4--unordered-lists-\"><a name=\"无序列表（减号）Unordered Lists (-)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li><li>列表二</li><li>列表三</li></ul>\n<h4 id=\"h4--unordered-lists-\"><a name=\"无序列表（星号）Unordered Lists (*)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li><li>列表二</li><li>列表三</li></ul>\n<h4 id=\"h4--unordered-lists-\"><a name=\"无序列表（加号和嵌套）Unordered Lists (+)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li><li>列表二<ul>\n<li>列表二-1</li><li>列表二-2</li><li>列表二-3</li></ul>\n</li><li>列表三<ul>\n<li>列表一</li><li>列表二</li><li>列表三</li></ul>\n</li></ul>\n<h4 id=\"h4--ordered-lists-\"><a name=\"有序列表 Ordered Lists (-)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li><li>第二行</li><li>第三行</li></ol>\n<h4 id=\"h4-gfm-task-list\"><a name=\"GFM task list\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>GFM task list</h4><ul>\n<li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled /> GFM task list 1</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled /> GFM task list 2</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> GFM task list 3<ul>\n<li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> GFM task list 3-1</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> GFM task list 3-2</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> GFM task list 3-3</li></ul>\n</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> GFM task list 4<ul>\n<li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> GFM task list 4-1</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> GFM task list 4-2</li></ul>\n</li></ul>\n<hr>\n<h3 id=\"h3--tables\"><a name=\"绘制表格 Tables\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell </td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left-Aligned</th>\n<th style=\"text-align:center\">Center Aligned</th>\n<th style=\"text-align:right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">col 3 is</td>\n<td style=\"text-align:center\">some wordy text</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">col 2 is</td>\n<td style=\"text-align:center\">centered</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">zebra stripes</td>\n<td style=\"text-align:center\">are neat</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th style=\"text-align:right\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td style=\"text-align:right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td style=\"text-align:right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td style=\"text-align:right\">$1</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"h4--html-entities-codes\"><a name=\"特殊符号 HTML Entities Codes\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; </p>\n<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>\n<p>18&ordm;C  &quot;  &apos;</p>\n<hr style=\"page-break-after:always;\" class=\"page-break editormd-page-break\" /><h3 id=\"h3-emoji-smiley-\"><a name=\"Emoji表情 :smiley:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Emoji表情 <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png\" class=\"emoji\" title=\"&#58;smiley&#58;\" alt=\"&#58;smiley&#58;\" /></h3><blockquote>\n<p>Blockquotes <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/star.png\" class=\"emoji\" title=\"&#58;star&#58;\" alt=\"&#58;star&#58;\" /></p>\n</blockquote>\n<h4 id=\"h4-gfm-task-lists-amp-emoji-amp-fontawesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x-\"><a name=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji <i class=\"editormd-logo-5x\" title=\"Editor.md logo (editormd-logo-5x)\"></i></h4><ul>\n<li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled /> <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png\" class=\"emoji\" title=\"&#58;smiley&#58;\" alt=\"&#58;smiley&#58;\" /> <a href=\"https://github.com/mentions\" title=\"&#64;mentions\" class=\"at-link\">@mentions</a>, <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png\" class=\"emoji\" title=\"&#58;smiley&#58;\" alt=\"&#58;smiley&#58;\" /> #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and &lt;del&gt;tags&lt;/del&gt; supported <i class=\"editormd-logo\" title=\"Editor.md logo (editormd-logo)\"></i>;</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled /> list syntax required (any unordered or ordered list supported) <i class=\"editormd-logo-3x\" title=\"Editor.md logo (editormd-logo-3x)\"></i>;</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" checked disabled /> [ ] <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png\" class=\"emoji\" title=\"&#58;smiley&#58;\" alt=\"&#58;smiley&#58;\" /> this is a complete item <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png\" class=\"emoji\" title=\"&#58;smiley&#58;\" alt=\"&#58;smiley&#58;\" />;</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> []this is an incomplete item <a href=\"#\">test link</a> <i class=\"fa fa-star fa-emoji\" title=\"star\"></i> <a href=\"https://github.com/pandao\" title=\"&#64;pandao\" class=\"at-link\">@pandao</a>; </li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> [ ]this is an incomplete item <i class=\"fa fa-star fa-emoji\" title=\"star\"></i> <i class=\"fa fa-gear fa-emoji\" title=\"gear\"></i>;<ul>\n<li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png\" class=\"emoji\" title=\"&#58;smiley&#58;\" alt=\"&#58;smiley&#58;\" /> this is an incomplete item <a href=\"#\">test link</a> <i class=\"fa fa-star fa-emoji\" title=\"star\"></i> <i class=\"fa fa-gear fa-emoji\" title=\"gear\"></i>;</li><li style=\"list-style: none;\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" /> <img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/smiley.png\" class=\"emoji\" title=\"&#58;smiley&#58;\" alt=\"&#58;smiley&#58;\" /> this is  <i class=\"fa fa-star fa-emoji\" title=\"star\"></i> <i class=\"fa fa-gear fa-emoji\" title=\"gear\"></i> an incomplete item <a href=\"#\">test link</a>;</li></ul>\n</li></ul>\n<h4 id=\"h4--escape\"><a name=\"反斜杠 Escape\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<hr style=\"page-break-after:always;\" class=\"page-break editormd-page-break\" /><h3 id=\"h3--tex-katex-\"><a name=\"科学公式 TeX(KaTeX)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>科学公式 TeX(KaTeX)</h3><p class=\"editormd-tex\">E=mc^2</p>\n<p>行内的公式<span class=\"editormd-tex\">E=mc^2</span>行内的公式，行内的<span class=\"editormd-tex\">E=mc^2</span>公式。</p>\n<p class=\"editormd-tex\">x &gt; y</p>\n<p class=\"editormd-tex\">(sqrt{3x-1}+(1+x)^2)</p>\n<p class=\"editormd-tex\">sin(alpha)^{	heta}=sum_{i=0}^{n}(x^i + cos(f))</p>\n<p>多行公式：</p>\n<p class=\"editormd-tex\">displaystyle\nleft( sum\\_{k=1}^n a\\_k b\\_k \right)^2\nleq\nleft( sum\\_{k=1}^n a\\_k^2 \right)\nleft( sum\\_{k=1}^n b\\_k^2 \right)</p><p class=\"editormd-tex\">displaystyle \n    frac{1}{\n        Bigl(sqrt{phi sqrt{5}}-phiBigr) e^{\n        frac25 pi}} = 1+frac{e^{-2pi}} {1+frac{e^{-4pi}} {\n        1+frac{e^{-6pi}}\n        {1+frac{e^{-8pi}}\n         {1+cdots} }\n        } \n    }</p><p class=\"editormd-tex\">f(x) = int_{-infty}^infty\n    hat f(xi),e^{2 pi i xi x}\n    ,dxi</p><h3 id=\"h3--page-break\"><a name=\"分页符 Page break\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>分页符 Page break</h3><blockquote>\n<p>Print Test: Ctrl + P</p>\n</blockquote>\n<hr style=\"page-break-after:always;\" class=\"page-break editormd-page-break\" /><h3 id=\"h3--flowchart\"><a name=\"绘制流程图 Flowchart\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>绘制流程图 Flowchart</h3><div class=\"flowchart\">st=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op</div><hr style=\"page-break-after:always;\" class=\"page-break editormd-page-break\" /><h3 id=\"h3--sequence-diagram\"><a name=\"绘制序列图 Sequence Diagram\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>绘制序列图 Sequence Diagram</h3><div class=\"sequence-diagram\">Andrew->China: Says Hello \nNote right of China: China thinks\nabout it \nChina-->Andrew: How are you? \nAndrew->>China: I am good thanks!</div><h3 id=\"h3-end\"><a name=\"End\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>End</h3>', '0', '0', null, '2019-10-14 14:37:04', '2019-10-14 14:37:04');
INSERT INTO `blogs` VALUES ('BAC94D46', 'BD4E76C0', '第二篇也是我的', '# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2               \r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\r\n\r\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test() {\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function() {\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str) {\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str) {\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML 代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\r\n        <title>Hello world!</title>\r\n        <style type=\"text/css\">\r\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\r\n            ul{list-style: none;}\r\n            img{border:none;vertical-align: middle;}\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <h1 class=\"text-xxl\">Hello world!</h1>\r\n        <p class=\"text-green\">Plain text</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n[========]\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n\r\n[========]\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n\r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$x > y$$\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n\r\n### 分页符 Page break\r\n\r\n> Print Test: Ctrl + P\r\n\r\n[========]\r\n\r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n[========]\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n\r\n# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2               \r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\r\n\r\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test() {\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function() {\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str) {\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str) {\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML 代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\r\n        <title>Hello world!</title>\r\n        <style type=\"text/css\">\r\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\r\n            ul{list-style: none;}\r\n            img{border:none;vertical-align: middle;}\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <h1 class=\"text-xxl\">Hello world!</h1>\r\n        <p class=\"text-green\">Plain text</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n[========]\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n\r\n[========]\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n\r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$x > y$$\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n\r\n### 分页符 Page break\r\n\r\n> Print Test: Ctrl + P\r\n\r\n[========]\r\n\r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n[========]\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n\r\n# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2               \r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\r\n\r\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test() {\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function() {\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str) {\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str) {\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML 代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\r\n        <title>Hello world!</title>\r\n        <style type=\"text/css\">\r\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\r\n            ul{list-style: none;}\r\n            img{border:none;vertical-align: middle;}\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <h1 class=\"text-xxl\">Hello world!</h1>\r\n        <p class=\"text-green\">Plain text</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n[========]\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n\r\n[========]\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n\r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$x > y$$\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n\r\n### 分页符 Page break\r\n\r\n> Print Test: Ctrl + P\r\n\r\n[========]\r\n\r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n[========]\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n\r\n### Endv# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2               \r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\r\n\r\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test() {\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function() {\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str) {\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str) {\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML 代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\r\n        <title>Hello world!</title>\r\n        <style type=\"text/css\">\r\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\r\n            ul{list-style: none;}\r\n            img{border:none;vertical-align: middle;}\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <h1 class=\"text-xxl\">Hello world!</h1>\r\n        <p class=\"text-green\">Plain text</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n[========]\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n\r\n[========]\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n\r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$x > y$$\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n\r\n### 分页符 Page break\r\n\r\n> Print Test: Ctrl + P\r\n\r\n[========]\r\n\r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n[========]\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n\r\n### End# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2               \r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\r\n\r\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test() {\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function() {\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str) {\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str) {\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML 代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\r\n        <title>Hello world!</title>\r\n        <style type=\"text/css\">\r\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\r\n            ul{list-style: none;}\r\n            img{border:none;vertical-align: middle;}\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <h1 class=\"text-xxl\">Hello world!</h1>\r\n        <p class=\"text-green\">Plain text</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n[========]\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n\r\n[========]\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n\r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$x > y$$\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n\r\n### 分页符 Page break\r\n\r\n> Print Test: Ctrl + P\r\n\r\n[========]\r\n\r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n[========]\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n\r\n### End# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2               \r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\r\n\r\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test() {\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function() {\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str) {\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str) {\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML 代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\r\n        <title>Hello world!</title>\r\n        <style type=\"text/css\">\r\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\r\n            ul{list-style: none;}\r\n            img{border:none;vertical-align: middle;}\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <h1 class=\"text-xxl\">Hello world!</h1>\r\n        <p class=\"text-green\">Plain text</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n[========]\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n\r\n[========]\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n\r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$x > y$$\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n\r\n### 分页符 Page break\r\n\r\n> Print Test: Ctrl + P\r\n\r\n[========]\r\n\r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n[========]\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n# Editor.md\r\n\r\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\r\n\r\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\r\n\r\n**目录 (Table of Contents)**\r\n\r\n[TOCM]\r\n\r\n[TOC]\r\n\r\n# Heading 1\r\n## Heading 2               \r\n### Heading 3\r\n#### Heading 4\r\n##### Heading 5\r\n###### Heading 6\r\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\r\n\r\n#### 标题（用底线的形式）Heading (underline)\r\n\r\nThis is an H1\r\n=============\r\n\r\nThis is an H2\r\n-------------\r\n\r\n### 字符效果和横线等\r\n                \r\n----\r\n\r\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\r\n*斜体字*      _斜体字_\r\n**粗体**  __粗体__\r\n***粗斜体*** ___粗斜体___\r\n\r\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\r\n\r\n**缩写(同HTML的abbr标签)**\r\n\r\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\r\n\r\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\r\n\r\n### 引用 Blockquotes\r\n\r\n> 引用文本 Blockquotes\r\n\r\n引用的行内混合 Blockquotes\r\n                    \r\n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\r\n\r\n### 锚点与链接 Links\r\n\r\n[普通链接](http://localhost/)\r\n\r\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\r\n\r\n直接链接：<https://github.com>\r\n\r\n[锚点链接][anchor-id] \r\n\r\n[anchor-id]: http://www.this-anchor-link.com/\r\n\r\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\r\n\r\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\r\n\r\n> @pandao\r\n\r\n### 多语言代码高亮 Codes\r\n\r\n#### 行内代码 Inline code\r\n\r\n执行命令：`npm install marked`\r\n\r\n#### 缩进风格\r\n\r\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\r\n\r\n    <?php\r\n        echo \"Hello world!\";\r\n    ?>\r\n    \r\n预格式化文本：\r\n\r\n    | First Header  | Second Header |\r\n    | ------------- | ------------- |\r\n    | Content Cell  | Content Cell  |\r\n    | Content Cell  | Content Cell  |\r\n\r\n#### JS代码　\r\n\r\n```javascript\r\nfunction test() {\r\n	console.log(\"Hello world!\");\r\n}\r\n \r\n(function(){\r\n    var box = function() {\r\n        return box.fn.init();\r\n    };\r\n\r\n    box.prototype = box.fn = {\r\n        init : function(){\r\n            console.log(\'box.init()\');\r\n\r\n			return this;\r\n        },\r\n\r\n		add : function(str) {\r\n			alert(\"add\", str);\r\n\r\n			return this;\r\n		},\r\n\r\n		remove : function(str) {\r\n			alert(\"remove\", str);\r\n\r\n			return this;\r\n		}\r\n    };\r\n    \r\n    box.fn.init.prototype = box.fn;\r\n    \r\n    window.box =box;\r\n})();\r\n\r\nvar testBox = box();\r\ntestBox.add(\"jQuery\").remove(\"jQuery\");\r\n```\r\n\r\n#### HTML 代码 HTML codes\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <mate charest=\"utf-8\" />\r\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\r\n        <title>Hello world!</title>\r\n        <style type=\"text/css\">\r\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\r\n            ul{list-style: none;}\r\n            img{border:none;vertical-align: middle;}\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <h1 class=\"text-xxl\">Hello world!</h1>\r\n        <p class=\"text-green\">Plain text</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\n### 图片 Images\r\n\r\nImage:\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\r\n\r\n> Follow your heart.\r\n\r\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\r\n\r\n> 图为：厦门白城沙滩\r\n\r\n图片加链接 (Image + Link)：\r\n\r\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\r\n\r\n> 图为：李健首张专辑《似水流年》封面\r\n                \r\n----\r\n\r\n### 列表 Lists\r\n\r\n#### 无序列表（减号）Unordered Lists (-)\r\n                \r\n- 列表一\r\n- 列表二\r\n- 列表三\r\n     \r\n#### 无序列表（星号）Unordered Lists (*)\r\n\r\n* 列表一\r\n* 列表二\r\n* 列表三\r\n\r\n#### 无序列表（加号和嵌套）Unordered Lists (+)\r\n                \r\n+ 列表一\r\n+ 列表二\r\n    + 列表二-1\r\n    + 列表二-2\r\n    + 列表二-3\r\n+ 列表三\r\n    * 列表一\r\n    * 列表二\r\n    * 列表三\r\n\r\n#### 有序列表 Ordered Lists (-)\r\n                \r\n1. 第一行\r\n2. 第二行\r\n3. 第三行\r\n\r\n#### GFM task list\r\n\r\n- [x] GFM task list 1\r\n- [x] GFM task list 2\r\n- [ ] GFM task list 3\r\n    - [ ] GFM task list 3-1\r\n    - [ ] GFM task list 3-2\r\n    - [ ] GFM task list 3-3\r\n- [ ] GFM task list 4\r\n    - [ ] GFM task list 4-1\r\n    - [ ] GFM task list 4-2\r\n                \r\n----\r\n                    \r\n### 绘制表格 Tables\r\n\r\n| 项目        | 价格   |  数量  |\r\n| --------   | -----:  | :----:  |\r\n| 计算机      | $1600   |   5     |\r\n| 手机        |   $12   |   12   |\r\n| 管线        |    $1    |  234  |\r\n                    \r\nFirst Header  | Second Header\r\n------------- | -------------\r\nContent Cell  | Content Cell\r\nContent Cell  | Content Cell \r\n\r\n| First Header  | Second Header |\r\n| ------------- | ------------- |\r\n| Content Cell  | Content Cell  |\r\n| Content Cell  | Content Cell  |\r\n\r\n| Function name | Description                    |\r\n| ------------- | ------------------------------ |\r\n| `help()`      | Display the help window.       |\r\n| `destroy()`   | **Destroy your computer!**     |\r\n\r\n| Left-Aligned  | Center Aligned  | Right Aligned |\r\n| :------------ |:---------------:| -----:|\r\n| col 3 is      | some wordy text | $1600 |\r\n| col 2 is      | centered        |   $12 |\r\n| zebra stripes | are neat        |    $1 |\r\n\r\n| Item      | Value |\r\n| --------- | -----:|\r\n| Computer  | $1600 |\r\n| Phone     |   $12 |\r\n| Pipe      |    $1 |\r\n                \r\n----\r\n\r\n#### 特殊符号 HTML Entities Codes\r\n\r\n&copy; &  &uml; &trade; &iexcl; &pound;\r\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \r\n\r\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\r\n\r\n18&ordm;C  &quot;  &apos;\r\n\r\n[========]\r\n\r\n### Emoji表情 :smiley:\r\n\r\n> Blockquotes :star:\r\n\r\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\r\n\r\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\r\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\r\n- [x] [ ] :smiley: this is a complete item :smiley:;\r\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \r\n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\r\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\r\n \r\n#### 反斜杠 Escape\r\n\r\n\\*literal asterisks\\*\r\n\r\n[========]\r\n            \r\n### 科学公式 TeX(KaTeX)\r\n\r\n$$E=mc^2$$\r\n\r\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\r\n\r\n$$x > y$$\r\n\r\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\r\n                    \r\n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\r\n\r\n多行公式：\r\n\r\n```math\r\n\\displaystyle\r\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\r\n\\leq\r\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\r\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\r\n```\r\n\r\n```katex\r\n\\displaystyle \r\n    \\frac{1}{\r\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\r\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\r\n        1+\\frac{e^{-6\\pi}}\r\n        {1+\\frac{e^{-8\\pi}}\r\n         {1+\\cdots} }\r\n        } \r\n    }\r\n```\r\n\r\n```latex\r\nf(x) = \\int_{-\\infty}^\\infty\r\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\r\n    \\,d\\xi\r\n```\r\n\r\n### 分页符 Page break\r\n\r\n> Print Test: Ctrl + P\r\n\r\n[========]\r\n\r\n### 绘制流程图 Flowchart\r\n\r\n```flow\r\nst=>start: 用户登陆\r\nop=>operation: 登陆操作\r\ncond=>condition: 登陆成功 Yes or No?\r\ne=>end: 进入后台\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n[========]\r\n                    \r\n### 绘制序列图 Sequence Diagram\r\n                    \r\n```seq\r\nAndrew->China: Says Hello \r\nNote right of China: China thinks\\nabout it \r\nChina-->Andrew: How are you? \r\nAndrew->>China: I am good thanks!\r\n```\r\n\r\n### End', '0', '0', null, '2019-10-02 14:41:15', null);
INSERT INTO `blogs` VALUES ('CB4C1989', 'BD4E76C0', '第一篇博文', '<h2 id=\"h2--\"><a name=\"一、记录\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一、记录</h2><p>11111</p>\n<h2 id=\"h2--\"><a name=\"二、还是记录\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二、还是记录</h2>', '0', '0', null, '2019-10-02 14:39:09', null);
INSERT INTO `blogs` VALUES ('F81E3701', 'F7BBA498', '测试目录2', '## 第一篇\n222\n\n## 第二篇\n\n3333\n\n## 第三批', '0', '0', null, '2019-10-15 15:27:12', '2019-10-15 15:27:12');

-- ----------------------------
-- Table structure for `blogtags`
-- ----------------------------
DROP TABLE IF EXISTS `blogtags`;
CREATE TABLE `blogtags` (
  `tag_id` varchar(36) NOT NULL,
  `blog_id` varchar(36) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blogtags
-- ----------------------------
INSERT INTO `blogtags` VALUES ('B4963A5F', 'CB4C1989');
INSERT INTO `blogtags` VALUES ('9BF45B02', 'CB4C1989');
INSERT INTO `blogtags` VALUES ('88100C5C', 'BAC94D46');
INSERT INTO `blogtags` VALUES ('98D48544', 'BAC94D46');
INSERT INTO `blogtags` VALUES ('98EE83CB', '7BFCE25D');
INSERT INTO `blogtags` VALUES ('030A85AF', 'AEE5DC6D');
INSERT INTO `blogtags` VALUES ('534A1D83', '7588638B');
INSERT INTO `blogtags` VALUES ('62A51270', '976A8ACF');
INSERT INTO `blogtags` VALUES ('62A51270', 'F81E3701');
INSERT INTO `blogtags` VALUES ('B4963A5F', '10A3EB5F');
INSERT INTO `blogtags` VALUES ('B4963A5F', '904CB31C');

-- ----------------------------
-- Table structure for `blogtypes`
-- ----------------------------
DROP TABLE IF EXISTS `blogtypes`;
CREATE TABLE `blogtypes` (
  `type_id` varchar(36) NOT NULL,
  `blog_id` varchar(36) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blogtypes
-- ----------------------------

-- ----------------------------
-- Table structure for `commentlikeuser`
-- ----------------------------
DROP TABLE IF EXISTS `commentlikeuser`;
CREATE TABLE `commentlikeuser` (
  `comment_id` varchar(36) NOT NULL,
  `user_id` varchar(36) NOT NULL,
  UNIQUE KEY `qqq` (`comment_id`,`user_id`) USING HASH
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of commentlikeuser
-- ----------------------------
INSERT INTO `commentlikeuser` VALUES ('153FFCF4', 'BD4E76C0');
INSERT INTO `commentlikeuser` VALUES ('432E69C7', 'BD4E76C0');
INSERT INTO `commentlikeuser` VALUES ('AD7B616A', 'BD4E76C0');
INSERT INTO `commentlikeuser` VALUES ('AD7B616A', 'F7BBA498');
INSERT INTO `commentlikeuser` VALUES ('D03860E7', 'BD4E76C0');
INSERT INTO `commentlikeuser` VALUES ('FD9B80B1', 'F7BBA498');

-- ----------------------------
-- Table structure for `comments`
-- ----------------------------
DROP TABLE IF EXISTS `comments`;
CREATE TABLE `comments` (
  `comment_id` varchar(255) NOT NULL DEFAULT '' COMMENT '评论ID',
  `comment_user_id` varchar(36) DEFAULT NULL COMMENT '评论用户id',
  `blog_id` varchar(36) DEFAULT NULL COMMENT '博文ID',
  `comment_content` longtext COMMENT '评论内容',
  `parent_comment_id` varchar(36) DEFAULT NULL COMMENT '父评论ID',
  `comment_like_count` bigint(20) DEFAULT NULL COMMENT '点赞量',
  `comment_created_time` datetime DEFAULT NULL COMMENT '评论时间',
  `replied_user_id` varchar(36) DEFAULT NULL COMMENT '被回复人',
  `like_user_id` varchar(36) DEFAULT NULL,
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comments
-- ----------------------------
INSERT INTO `comments` VALUES ('153FFCF4', 'BD4E76C0', '11', '22', '0', '0', '2019-10-10 09:25:27', '', null);
INSERT INTO `comments` VALUES ('432E69C7', 'BD4E76C0', '11', '11', '0', '0', '2019-10-10 09:08:13', '', null);
INSERT INTO `comments` VALUES ('53A26F6F', 'F7BBA498', '11', '回复:根用户  eeee', '153FFCF4', '0', '2019-10-11 15:41:13', '', '');
INSERT INTO `comments` VALUES ('88AF6DD5', 'F7BBA498', 'F81E3701', 'sd', 'FD9B80B1', '0', '2019-10-15 16:52:55', '', '');
INSERT INTO `comments` VALUES ('98A5F35B', 'F7BBA498', '11', '回复:223dsdd', '153FFCF4', '0', '2019-10-11 15:33:13', '', '');
INSERT INTO `comments` VALUES ('AD7B616A', 'BD4E76C0', '11', 'weeesde', '153FFCF4', '0', '2019-10-11 15:03:18', '', '');
INSERT INTO `comments` VALUES ('AFAB5B33', 'BD4E76C0', '11', '去去去', 'AD7B616A', '0', '2019-10-11 15:29:17', '', '');
INSERT INTO `comments` VALUES ('BBB82A86', 'F7BBA498', '11', '回复:223dsdd', '153FFCF4', '0', '2019-10-11 15:33:22', '', '');
INSERT INTO `comments` VALUES ('D03860E7', 'BD4E76C0', '11', '222', '0', '0', '2019-10-10 09:09:38', '', null);
INSERT INTO `comments` VALUES ('DC33195D', 'BD4E76C0', '11', '1111', '0', '0', '2019-10-10 09:08:55', '', null);
INSERT INTO `comments` VALUES ('FD9B80B1', 'F7BBA498', 'F81E3701', '11', '0', '0', '2019-10-15 16:35:29', '', '');

-- ----------------------------
-- Table structure for `tags`
-- ----------------------------
DROP TABLE IF EXISTS `tags`;
CREATE TABLE `tags` (
  `tag_id` varchar(36) NOT NULL COMMENT '标签id',
  `tag_name` varchar(36) NOT NULL COMMENT '标签name',
  `tag_alias` varchar(255) DEFAULT NULL COMMENT '标签别称',
  `tag_description` varchar(255) DEFAULT NULL COMMENT '标签描述',
  `tag_created_time` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of tags
-- ----------------------------
INSERT INTO `tags` VALUES ('030A85AF', 'markdwon', '', '', '2019-10-14 14:37:03');
INSERT INTO `tags` VALUES ('1A729CA1', '首次', '', '', '2019-10-01 14:48:22');
INSERT INTO `tags` VALUES ('534A1D83', '目录', '', '', '2019-10-15 11:46:30');
INSERT INTO `tags` VALUES ('62A51270', '534A1D83', '', '', '2019-10-15 15:12:20');
INSERT INTO `tags` VALUES ('7409F93B', '博文', '', '', '2019-10-01 14:48:21');
INSERT INTO `tags` VALUES ('88100C5C', 'js', '', '', '2019-10-02 14:41:10');
INSERT INTO `tags` VALUES ('98D48544', 'vue', '', '', '2019-10-02 14:41:10');
INSERT INTO `tags` VALUES ('98EE83CB', '转载', '', '', '2019-10-11 08:50:23');
INSERT INTO `tags` VALUES ('9BF45B02', '7409F93B', '', '', '2019-10-01 14:50:08');
INSERT INTO `tags` VALUES ('B4963A5F', '1A729CA1', '', '', '2019-10-01 14:49:59');

-- ----------------------------
-- Table structure for `types`
-- ----------------------------
DROP TABLE IF EXISTS `types`;
CREATE TABLE `types` (
  `type_id` varchar(36) NOT NULL,
  `type_name` varchar(36) NOT NULL COMMENT '分类name',
  `type_alias` varchar(36) DEFAULT NULL COMMENT '别称',
  `type_descrition` varchar(255) DEFAULT NULL COMMENT '描述',
  `type_created_time` datetime DEFAULT NULL COMMENT '创建时间',
  `type_updated_time` datetime DEFAULT NULL COMMENT '修改时间',
  `parent_type_id` varchar(36) DEFAULT NULL,
  PRIMARY KEY (`type_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of types
-- ----------------------------

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `user_id` varchar(255) NOT NULL,
  `user_birthday` varchar(255) DEFAULT NULL,
  `user_created_time` varchar(255) DEFAULT NULL,
  `user_declaration` varchar(255) DEFAULT NULL,
  `user_email` varchar(255) DEFAULT NULL,
  `user_imgurl` varchar(255) DEFAULT NULL,
  `user_ip` varchar(255) DEFAULT NULL,
  `user_name` varchar(255) DEFAULT NULL,
  `user_nickname` varchar(255) DEFAULT NULL,
  `user_password` varchar(255) DEFAULT NULL,
  `user_role` varchar(255) DEFAULT NULL,
  `user_sex` varchar(255) DEFAULT NULL,
  `user_telephone` varchar(255) DEFAULT NULL,
  `user_updated_time` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------

-- ----------------------------
-- Table structure for `users`
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `user_name` varchar(255) NOT NULL COMMENT '用户名',
  `user_id` varchar(255) NOT NULL COMMENT '用户id',
  `user_password` varchar(255) NOT NULL COMMENT '密码',
  `user_role` varchar(255) DEFAULT 'bloger' COMMENT '角色、默认博主',
  `user_sex` varchar(20) DEFAULT 'male' COMMENT '用户性别',
  `user_imgurl` varchar(100) DEFAULT NULL COMMENT '用户头像',
  `user_ip` varchar(20) DEFAULT NULL COMMENT '用户IP',
  `user_nickname` varchar(20) DEFAULT NULL COMMENT '用户昵称',
  `user_email` varchar(20) DEFAULT NULL COMMENT '用户邮箱',
  `user_created_time` datetime DEFAULT NULL COMMENT '用户创建时间',
  `user_updated_time` datetime DEFAULT NULL COMMENT '修改时间',
  `user_birthday` varchar(20) DEFAULT NULL COMMENT '用户生日',
  `user_telephone` varchar(20) DEFAULT NULL COMMENT '用户手机号',
  `user_declaration` varchar(255) DEFAULT NULL COMMENT '个性宣言',
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('admin2345', '43AE1563', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '管理员23', '', '2019-09-25 16:00:50', '2019-09-25 16:00:50', '', '', null);
INSERT INTO `users` VALUES ('admin78', '6B12C10C', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '管理员', '', '2019-09-25 16:05:13', '2019-09-25 16:05:13', '', '', null);
INSERT INTO `users` VALUES ('admin234', '89B05CB8', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '管理员23', '', '2019-09-25 16:00:21', '2019-09-25 16:00:21', '', '', null);
INSERT INTO `users` VALUES ('admin2', '90272057', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '管理员2', '', '2019-09-25 15:58:00', '2019-09-25 15:58:00', '', '', null);
INSERT INTO `users` VALUES ('admin23', 'B2BAF9DD', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '管理员23', '', '2019-09-25 15:59:12', '2019-09-25 15:59:12', '', '', null);
INSERT INTO `users` VALUES ('admin', 'BD4E76C0', 'ae2d874fe06430805b3fa7e61ae7f46d', '', 'male', 'BD4E76C0nan.jpg', '::ffff:127.0.0.1', '管理员', '479075391@qq.com', '2019-09-25 15:53:52', '2019-10-28 14:51:37', '2019-09-08 23:53:59', '15666131016', '咸鱼一条');
INSERT INTO `users` VALUES ('admin234567', 'E9ADEBCF', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '管理员', '', '2019-09-25 16:11:11', '2019-09-25 16:11:11', '', '', null);
INSERT INTO `users` VALUES ('admin23456', 'EEA7BB6B', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '管理员23', '', '2019-09-25 16:01:50', '2019-09-25 16:01:50', '', '', null);
INSERT INTO `users` VALUES ('root', 'F7BBA498', 'ae2d874fe06430805b3fa7e61ae7f46d', '', '', '', '', '根用户', '', '2019-09-25 16:37:24', '2019-09-25 16:37:24', '', '', null);
